package com.renren.ugc.comment.model;

import java.io.Serializable;

import com.renren.ugc.comment.util.CommentBusIDentifier;
import com.renren.ugc.comment.xoa2.CommentType;

/**
 * The pojo class that holds comment internally this class could be
 * serialized by JDK. The reason to use this class rather than
 * {@link com.renren.ugc.comment.xoa.Comment} is that one is generated by
 * thrift IDL and thus too complicated to be used for caching
 * (Serialization) and DAO.
 * 
 * @author jiankuan.xing
 * 
 */
public final class Comment implements Serializable, Cloneable {

    private static final long serialVersionUID = -5242220111513036907L;

    /**
     * 评论id
     */
    private long id;

    /**
     * 评论业务类型（值）
     */
    private int type;

    /**
     * 评论者id
     */
    private int authorId;

    /**
     * 评论者名字
     */
    private String authorName;

    /**
     * 评论者头像URL
     */
    private String authorHead;

    /**
     * 被评论的实体
     */
    private Entry entry;

    /**
     * 评论内容
     */
    private String content;

    /**
     * 在替换之前的评论内容
     */
    private String originalContent;

    /**
     * 被回复的用户Id
     */
    private int toUserId;

    /**
     * 被回复的楼层
     */
    private long toCommendId;

    /**
     * 评论标记
     */
    private Flag flag;

    /**
     * 评论产生时间
     */
    private long createdTime;

    /**
     * 悄悄话用户id，该id可以看这条悄悄话
     */
    private int whipserToId;

    /**
     * 评论的附属属性
     */
    private Metadata metadata;

    /**
     * like 信息
     */
    private CommentLikeInfo likeInfo;

    /**
     * 语音评论详细信息
     */
    private CommentVoiceInfo voiceInfo;

    /**
     * 评论作者的VIP ICON URL
     */
    private String authorVipIcon;

    /**
     * 保存评论的原有id，如果评论是从其他业务导入过来的话
     */
    private long originalCommentId;

    /**
     * 评论是否被link
     */
    private boolean isLinked;

    /**
     * 评论的作者是否是连续多天登录的,如果是前端会显示为橙名
     */
    private boolean authorKeepUse;
    
    
    /**
     * 楼层信息 
     */
    private int floor;
    
    /**
     * 评论附带的"引用评论"信息
     */
    private SimpleCommentInfo simpleComment;
    
    /**
     * 评论附带图片的缩略图
     */
    private String commentPhotoUrl;
    
    /**
     * 评论附带图片的id
     */
    private long commentPhotoId;
    

    public int getFloor() {
		return floor;
	}

	public void setFloor(int floor) {
		this.floor = floor;
	}

	public SimpleCommentInfo getSimpleComment() {
		return simpleComment;
	}

	public void setSimpleComment(SimpleCommentInfo simpleComment) {
		this.simpleComment = simpleComment;
	}


    public boolean isAuthorKeepUse() {
        return authorKeepUse;
    }

    public void setAuthorKeepUse(boolean authorKeepUse) {
        this.authorKeepUse = authorKeepUse;
    }

    /**
     * in cache, there are 2 cases need to be distinguished: 1. the cache
     * doesn't exist 2. the cache exists, but the value is "no comment" we
     * use null to represent the first case while indicate "no comment" by
     * this <code>EMPTY_COMMENT</code>
     */
    public static final Comment EMPTY_COMMENT = new Comment(0);

    public Comment() {
    }

    public Comment(long id) {
        this.id = id;
    }

    public Comment(com.renren.ugc.comment.xoa2.Comment comment) {
        toInternalComment(comment);
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public int getAuthorId() {
        return authorId;
    }

    public void setAuthorId(int authorId) {
        this.authorId = authorId;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public int getWhipserToId() {
        return whipserToId;
    }

    public void setWhipserToId(int whipserToId) {
        this.whipserToId = whipserToId;
    }

    public long getCreatedTime() {
        return createdTime;
    }

    public void setCreatedTime(long createdTime) {
        this.createdTime = createdTime;
    }

    public boolean isWhisper() {
        return whipserToId > 0;
    }

    public Entry getEntry() {
        return entry;
    }

    public void setEntry(Entry entry) {
        this.entry = entry;
    }

    public int getToUserId() {
        return toUserId;
    }

    public void setToUserId(int toUserId) {
        this.toUserId = toUserId;
    }

    public long getToCommentId() {
        return toCommendId;
    }

    public void setToCommendId(long toCommendId) {
        this.toCommendId = toCommendId;
    }

    public Flag getFlag() {
        return flag;
    }

    public void setFlag(Flag flag) {
        this.flag = flag;
    }

    public Metadata getMetadata() {
        return metadata;
    }

    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    public CommentLikeInfo getLikeInfo() {
        return likeInfo;
    }

    public void setLikeInfo(CommentLikeInfo likeInfo) {
        this.likeInfo = likeInfo;
    }

    public boolean isVoiceComment() {
        return flag != null && flag.isUseVoice();
    }

    public CommentVoiceInfo getVoiceInfo() {
        return voiceInfo;
    }

    public void setVoiceInfo(CommentVoiceInfo voiceInfo) {
        this.voiceInfo = voiceInfo;
    }

    public String getAuthorVipIcon() {
        return authorVipIcon;
    }

    public void setAuthorVipIcon(String authorVipIcon) {
        this.authorVipIcon = authorVipIcon;
    }

    public long getOriginalCommentId() {
        return originalCommentId;
    }

    public void setOriginalCommentId(long originalCommentId) {
        this.originalCommentId = originalCommentId;
    }

    /**
     * convert the comment defined in the xoa2 interface to internal
     * comment
     */
    private void toInternalComment(com.renren.ugc.comment.xoa2.Comment comment) {
        this.setId(comment.getId());
        this.setAuthorId(comment.getAuthorId());
        this.setEntry(new Entry(comment.getEntry()));
        this.setContent(comment.getContent());
        this.setOriginalContent(comment.getOriginalContent());
        this.setCreatedTime(comment.getCreateTimeMillis());
        if (comment.isSetReplyToUser()) {
            this.setToUserId(comment.getReplyToUser().getId());
        }
        this.setToCommendId(comment.getToCommentId());
        this.setWhipserToId(comment.getWhipserId());
        if (comment.isVoiceComment() && comment.getVoiceInfo() != null) {
            this.setVoiceInfo(new CommentVoiceInfo(comment.getVoiceInfo()));
        }
        this.setOriginalCommentId(comment.getOriginalCommentId());
        this.setLinked(comment.isLinkedComment());
    }

    public String getAuthorName() {
        return authorName;
    }

    public void setAuthorName(String authorName) {
        this.authorName = authorName;
    }

    public String getAuthorHead() {
        return authorHead;
    }

    public void setAuthorHead(String authorHead) {
        this.authorHead = authorHead;
    }

    public String getOriginalContent() {
        return originalContent;
    }

    public void setOriginalContent(String originalContent) {
        this.originalContent = originalContent;
    }

    public static boolean isEmptyComment(Comment comment) {
        return (comment != null && comment.getId() == 0);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public long getIdIfHasOldUgc() {
        return this.flag != null && this.flag.isOldUgc() ? CommentBusIDentifier.getInstance().reverseGenCommentId(
                id)
                : this.getOriginalCommentId();
    }

    public boolean isOldUgc() {
        return flag != null && flag.isOldUgc();
    }

    public boolean isLinked() {
        return isLinked;
    }

    public void setLinked(boolean isLinked) {
        this.isLinked = isLinked;
    }
    
    public String getCommentPhotoUrl() {
		return commentPhotoUrl;
	}

	public void setCommentPhotoUrl(String commentPhotoUrl) {
		this.commentPhotoUrl = commentPhotoUrl;
	}

	public long getCommentPhotoId() {
		return commentPhotoId;
	}

	public void setCommentPhotoId(long commentPhotoId) {
		this.commentPhotoId = commentPhotoId;
	}

	public Comment clone() {
        Comment comment = null;
        try {
            comment = (Comment) super.clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        //深度clone
        Entry entry = new Entry();
        comment.setEntry(entry);
        //剩下的字段比如meta,flag没有clone的意义

        return comment;
    }
    
    public void buildLinkedInfos(long linkedEntryId,int linkedEntryOwnerId,CommentType linkedEntryType){
    	
    	if(this.getEntry() == null){
    		return;
    	}
    	
    	this.getEntry().setId(linkedEntryId);
    	this.getEntry().setOwnerId(linkedEntryOwnerId);
    	this.getEntry().setType(linkedEntryType.toString());
    	this.type = linkedEntryType.getValue();
    	
    }

    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof Comment)) {
            return false;
        }

        Comment that = (Comment) obj;
        return this.id == that.id;
    }

    @Override
    public int hashCode() {
        if (this.id != 0) {
            return (int) (this.id % Integer.MAX_VALUE);
        } else {
            return 0;
        }
    }
}
