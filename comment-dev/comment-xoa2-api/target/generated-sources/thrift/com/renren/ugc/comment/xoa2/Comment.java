/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.ugc.comment.xoa2;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 评论
 */
public class Comment implements org.apache.thrift.TBase<Comment, Comment._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Comment");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authorId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("entry", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AUTHOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("authorName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AUTHOR_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("authorHead", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ORIGINAL_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("originalContent", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeMillis", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField WHIPSER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("whipserId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField REPLY_TO_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("replyToUser", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField TO_COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toCommentId", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField LIKE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("likeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField VOICE_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("voiceComment", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField VOICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("voiceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField AUTHOR_VIP_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("authorVipIcon", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ORIGINAL_COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("originalCommentId", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)21);
  private static final org.apache.thrift.protocol.TField LINKED_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("linkedComment", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField AUTHOR_KEEP_USE_FIELD_DESC = new org.apache.thrift.protocol.TField("authorKeepUse", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("floor", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField SIMPLE_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleComment", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField COMMENT_PHOTO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("commentPhotoUrl", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField COMMENT_PHOTO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commentPhotoId", org.apache.thrift.protocol.TType.I64, (short)28);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommentTupleSchemeFactory());
  }

  /**
   * comment的Id
   */
  public long id; // required
  /**
   * 评论者id
   */
  public int authorId; // required
  /**
   * 被评论的“实体”
   */
  public Entry entry; // required
  /**
   * 评论内容，有140字限制
   */
  public String content; // required
  /**
   * 评论者名字，冗余字段，发新鲜事用
   */
  public String authorName; // required
  /**
   * 评论者头像，冗余字段，发新鲜事用
   */
  public String authorHead; // required
  /**
   * 评论内容经过处理后(例如Ubb替换)的新内容放在content，而原始的内容存储在这里
   */
  public String originalContent; // optional
  /**
   * 评论产生时间
   */
  public long createTimeMillis; // required
  /**
   * 悄悄话用户id，该id可以看这条悄悄话
   */
  public int whipserId; // optional
  /**
   * 被回复者用户
   */
  public RepliedUser replyToUser; // optional
  /**
   * 被回复评论/楼层id
   */
  public long toCommentId; // optional
  /**
   * like 信息
   */
  public CommentLikeInfo likeInfo; // optional
  /**
   * 是否是语音评论
   */
  public boolean voiceComment; // optional
  /**
   * 语音评论详细信息
   */
  public CommentVoiceInfo voiceInfo; // optional
  /**
   * 评论作者的vip icon url
   */
  public String authorVipIcon; // optional
  /**
   * 保存评论的原有id，如果评论是从其他业务导入过来的话
   */
  public long originalCommentId; // optional
  /**
   * 扩展字段
   */
  public Map<String,String> params; // optional
  /**
   * 是否是linked评论
   */
  public boolean linkedComment; // optional
  /**
   * author是否是连续多天登录的(这样前端会判断是否显示成为橙名)
   */
  public boolean authorKeepUse; // optional
  /**
   * 评论type
   * 
   * @see CommentType
   */
  public CommentType type; // optional
  /**
   * 评论在一个entry下面的楼数
   */
  public int floor; // optional
  /**
   * 嵌套进入一个简单comment对象
   */
  public SimpleComment simpleComment; // optional
  /**
   * 评论附带图片的缩略图
   */
  public String commentPhotoUrl; // optional
  /**
   * 评论附带图片的id
   */
  public long commentPhotoId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * comment的Id
     */
    ID((short)1, "id"),
    /**
     * 评论者id
     */
    AUTHOR_ID((short)2, "authorId"),
    /**
     * 被评论的“实体”
     */
    ENTRY((short)3, "entry"),
    /**
     * 评论内容，有140字限制
     */
    CONTENT((short)4, "content"),
    /**
     * 评论者名字，冗余字段，发新鲜事用
     */
    AUTHOR_NAME((short)5, "authorName"),
    /**
     * 评论者头像，冗余字段，发新鲜事用
     */
    AUTHOR_HEAD((short)6, "authorHead"),
    /**
     * 评论内容经过处理后(例如Ubb替换)的新内容放在content，而原始的内容存储在这里
     */
    ORIGINAL_CONTENT((short)10, "originalContent"),
    /**
     * 评论产生时间
     */
    CREATE_TIME_MILLIS((short)12, "createTimeMillis"),
    /**
     * 悄悄话用户id，该id可以看这条悄悄话
     */
    WHIPSER_ID((short)13, "whipserId"),
    /**
     * 被回复者用户
     */
    REPLY_TO_USER((short)14, "replyToUser"),
    /**
     * 被回复评论/楼层id
     */
    TO_COMMENT_ID((short)15, "toCommentId"),
    /**
     * like 信息
     */
    LIKE_INFO((short)16, "likeInfo"),
    /**
     * 是否是语音评论
     */
    VOICE_COMMENT((short)17, "voiceComment"),
    /**
     * 语音评论详细信息
     */
    VOICE_INFO((short)18, "voiceInfo"),
    /**
     * 评论作者的vip icon url
     */
    AUTHOR_VIP_ICON((short)19, "authorVipIcon"),
    /**
     * 保存评论的原有id，如果评论是从其他业务导入过来的话
     */
    ORIGINAL_COMMENT_ID((short)20, "originalCommentId"),
    /**
     * 扩展字段
     */
    PARAMS((short)21, "params"),
    /**
     * 是否是linked评论
     */
    LINKED_COMMENT((short)22, "linkedComment"),
    /**
     * author是否是连续多天登录的(这样前端会判断是否显示成为橙名)
     */
    AUTHOR_KEEP_USE((short)23, "authorKeepUse"),
    /**
     * 评论type
     * 
     * @see CommentType
     */
    TYPE((short)24, "type"),
    /**
     * 评论在一个entry下面的楼数
     */
    FLOOR((short)25, "floor"),
    /**
     * 嵌套进入一个简单comment对象
     */
    SIMPLE_COMMENT((short)26, "simpleComment"),
    /**
     * 评论附带图片的缩略图
     */
    COMMENT_PHOTO_URL((short)27, "commentPhotoUrl"),
    /**
     * 评论附带图片的id
     */
    COMMENT_PHOTO_ID((short)28, "commentPhotoId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // AUTHOR_ID
          return AUTHOR_ID;
        case 3: // ENTRY
          return ENTRY;
        case 4: // CONTENT
          return CONTENT;
        case 5: // AUTHOR_NAME
          return AUTHOR_NAME;
        case 6: // AUTHOR_HEAD
          return AUTHOR_HEAD;
        case 10: // ORIGINAL_CONTENT
          return ORIGINAL_CONTENT;
        case 12: // CREATE_TIME_MILLIS
          return CREATE_TIME_MILLIS;
        case 13: // WHIPSER_ID
          return WHIPSER_ID;
        case 14: // REPLY_TO_USER
          return REPLY_TO_USER;
        case 15: // TO_COMMENT_ID
          return TO_COMMENT_ID;
        case 16: // LIKE_INFO
          return LIKE_INFO;
        case 17: // VOICE_COMMENT
          return VOICE_COMMENT;
        case 18: // VOICE_INFO
          return VOICE_INFO;
        case 19: // AUTHOR_VIP_ICON
          return AUTHOR_VIP_ICON;
        case 20: // ORIGINAL_COMMENT_ID
          return ORIGINAL_COMMENT_ID;
        case 21: // PARAMS
          return PARAMS;
        case 22: // LINKED_COMMENT
          return LINKED_COMMENT;
        case 23: // AUTHOR_KEEP_USE
          return AUTHOR_KEEP_USE;
        case 24: // TYPE
          return TYPE;
        case 25: // FLOOR
          return FLOOR;
        case 26: // SIMPLE_COMMENT
          return SIMPLE_COMMENT;
        case 27: // COMMENT_PHOTO_URL
          return COMMENT_PHOTO_URL;
        case 28: // COMMENT_PHOTO_ID
          return COMMENT_PHOTO_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __AUTHORID_ISSET_ID = 1;
  private static final int __CREATETIMEMILLIS_ISSET_ID = 2;
  private static final int __WHIPSERID_ISSET_ID = 3;
  private static final int __TOCOMMENTID_ISSET_ID = 4;
  private static final int __VOICECOMMENT_ISSET_ID = 5;
  private static final int __ORIGINALCOMMENTID_ISSET_ID = 6;
  private static final int __LINKEDCOMMENT_ISSET_ID = 7;
  private static final int __AUTHORKEEPUSE_ISSET_ID = 8;
  private static final int __FLOOR_ISSET_ID = 9;
  private static final int __COMMENTPHOTOID_ISSET_ID = 10;
  private BitSet __isset_bit_vector = new BitSet(11);
  private _Fields optionals[] = {_Fields.ORIGINAL_CONTENT,_Fields.WHIPSER_ID,_Fields.REPLY_TO_USER,_Fields.TO_COMMENT_ID,_Fields.LIKE_INFO,_Fields.VOICE_COMMENT,_Fields.VOICE_INFO,_Fields.AUTHOR_VIP_ICON,_Fields.ORIGINAL_COMMENT_ID,_Fields.PARAMS,_Fields.LINKED_COMMENT,_Fields.AUTHOR_KEEP_USE,_Fields.TYPE,_Fields.FLOOR,_Fields.SIMPLE_COMMENT,_Fields.COMMENT_PHOTO_URL,_Fields.COMMENT_PHOTO_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("authorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTRY, new org.apache.thrift.meta_data.FieldMetaData("entry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entry.class)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("authorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR_HEAD, new org.apache.thrift.meta_data.FieldMetaData("authorHead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("originalContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("createTimeMillis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WHIPSER_ID, new org.apache.thrift.meta_data.FieldMetaData("whipserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLY_TO_USER, new org.apache.thrift.meta_data.FieldMetaData("replyToUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepliedUser.class)));
    tmpMap.put(_Fields.TO_COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("toCommentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LIKE_INFO, new org.apache.thrift.meta_data.FieldMetaData("likeInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommentLikeInfo.class)));
    tmpMap.put(_Fields.VOICE_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("voiceComment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VOICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("voiceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommentVoiceInfo.class)));
    tmpMap.put(_Fields.AUTHOR_VIP_ICON, new org.apache.thrift.meta_data.FieldMetaData("authorVipIcon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("originalCommentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LINKED_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("linkedComment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AUTHOR_KEEP_USE, new org.apache.thrift.meta_data.FieldMetaData("authorKeepUse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommentType.class)));
    tmpMap.put(_Fields.FLOOR, new org.apache.thrift.meta_data.FieldMetaData("floor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIMPLE_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("simpleComment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SimpleComment.class)));
    tmpMap.put(_Fields.COMMENT_PHOTO_URL, new org.apache.thrift.meta_data.FieldMetaData("commentPhotoUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT_PHOTO_ID, new org.apache.thrift.meta_data.FieldMetaData("commentPhotoId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Comment.class, metaDataMap);
  }

  public Comment() {
    this.voiceComment = false;

    this.linkedComment = false;

    this.authorKeepUse = false;

  }

  public Comment(
    long id,
    int authorId,
    Entry entry,
    String content,
    String authorName,
    String authorHead,
    long createTimeMillis)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.authorId = authorId;
    setAuthorIdIsSet(true);
    this.entry = entry;
    this.content = content;
    this.authorName = authorName;
    this.authorHead = authorHead;
    this.createTimeMillis = createTimeMillis;
    setCreateTimeMillisIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Comment(Comment other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.authorId = other.authorId;
    if (other.isSetEntry()) {
      this.entry = new Entry(other.entry);
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetAuthorName()) {
      this.authorName = other.authorName;
    }
    if (other.isSetAuthorHead()) {
      this.authorHead = other.authorHead;
    }
    if (other.isSetOriginalContent()) {
      this.originalContent = other.originalContent;
    }
    this.createTimeMillis = other.createTimeMillis;
    this.whipserId = other.whipserId;
    if (other.isSetReplyToUser()) {
      this.replyToUser = new RepliedUser(other.replyToUser);
    }
    this.toCommentId = other.toCommentId;
    if (other.isSetLikeInfo()) {
      this.likeInfo = new CommentLikeInfo(other.likeInfo);
    }
    this.voiceComment = other.voiceComment;
    if (other.isSetVoiceInfo()) {
      this.voiceInfo = new CommentVoiceInfo(other.voiceInfo);
    }
    if (other.isSetAuthorVipIcon()) {
      this.authorVipIcon = other.authorVipIcon;
    }
    this.originalCommentId = other.originalCommentId;
    if (other.isSetParams()) {
      Map<String,String> __this__params = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.params.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__params_copy_key = other_element_key;

        String __this__params_copy_value = other_element_value;

        __this__params.put(__this__params_copy_key, __this__params_copy_value);
      }
      this.params = __this__params;
    }
    this.linkedComment = other.linkedComment;
    this.authorKeepUse = other.authorKeepUse;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.floor = other.floor;
    if (other.isSetSimpleComment()) {
      this.simpleComment = new SimpleComment(other.simpleComment);
    }
    if (other.isSetCommentPhotoUrl()) {
      this.commentPhotoUrl = other.commentPhotoUrl;
    }
    this.commentPhotoId = other.commentPhotoId;
  }

  public Comment deepCopy() {
    return new Comment(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setAuthorIdIsSet(false);
    this.authorId = 0;
    this.entry = null;
    this.content = null;
    this.authorName = null;
    this.authorHead = null;
    this.originalContent = null;
    setCreateTimeMillisIsSet(false);
    this.createTimeMillis = 0;
    setWhipserIdIsSet(false);
    this.whipserId = 0;
    this.replyToUser = null;
    setToCommentIdIsSet(false);
    this.toCommentId = 0;
    this.likeInfo = null;
    this.voiceComment = false;

    this.voiceInfo = null;
    this.authorVipIcon = null;
    setOriginalCommentIdIsSet(false);
    this.originalCommentId = 0;
    this.params = null;
    this.linkedComment = false;

    this.authorKeepUse = false;

    this.type = null;
    setFloorIsSet(false);
    this.floor = 0;
    this.simpleComment = null;
    this.commentPhotoUrl = null;
    setCommentPhotoIdIsSet(false);
    this.commentPhotoId = 0;
  }

  /**
   * comment的Id
   */
  public long getId() {
    return this.id;
  }

  /**
   * comment的Id
   */
  public Comment setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  /**
   * 评论者id
   */
  public int getAuthorId() {
    return this.authorId;
  }

  /**
   * 评论者id
   */
  public Comment setAuthorId(int authorId) {
    this.authorId = authorId;
    setAuthorIdIsSet(true);
    return this;
  }

  public void unsetAuthorId() {
    __isset_bit_vector.clear(__AUTHORID_ISSET_ID);
  }

  /** Returns true if field authorId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorId() {
    return __isset_bit_vector.get(__AUTHORID_ISSET_ID);
  }

  public void setAuthorIdIsSet(boolean value) {
    __isset_bit_vector.set(__AUTHORID_ISSET_ID, value);
  }

  /**
   * 被评论的“实体”
   */
  public Entry getEntry() {
    return this.entry;
  }

  /**
   * 被评论的“实体”
   */
  public Comment setEntry(Entry entry) {
    this.entry = entry;
    return this;
  }

  public void unsetEntry() {
    this.entry = null;
  }

  /** Returns true if field entry is set (has been assigned a value) and false otherwise */
  public boolean isSetEntry() {
    return this.entry != null;
  }

  public void setEntryIsSet(boolean value) {
    if (!value) {
      this.entry = null;
    }
  }

  /**
   * 评论内容，有140字限制
   */
  public String getContent() {
    return this.content;
  }

  /**
   * 评论内容，有140字限制
   */
  public Comment setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  /**
   * 评论者名字，冗余字段，发新鲜事用
   */
  public String getAuthorName() {
    return this.authorName;
  }

  /**
   * 评论者名字，冗余字段，发新鲜事用
   */
  public Comment setAuthorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

  public void unsetAuthorName() {
    this.authorName = null;
  }

  /** Returns true if field authorName is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorName() {
    return this.authorName != null;
  }

  public void setAuthorNameIsSet(boolean value) {
    if (!value) {
      this.authorName = null;
    }
  }

  /**
   * 评论者头像，冗余字段，发新鲜事用
   */
  public String getAuthorHead() {
    return this.authorHead;
  }

  /**
   * 评论者头像，冗余字段，发新鲜事用
   */
  public Comment setAuthorHead(String authorHead) {
    this.authorHead = authorHead;
    return this;
  }

  public void unsetAuthorHead() {
    this.authorHead = null;
  }

  /** Returns true if field authorHead is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorHead() {
    return this.authorHead != null;
  }

  public void setAuthorHeadIsSet(boolean value) {
    if (!value) {
      this.authorHead = null;
    }
  }

  /**
   * 评论内容经过处理后(例如Ubb替换)的新内容放在content，而原始的内容存储在这里
   */
  public String getOriginalContent() {
    return this.originalContent;
  }

  /**
   * 评论内容经过处理后(例如Ubb替换)的新内容放在content，而原始的内容存储在这里
   */
  public Comment setOriginalContent(String originalContent) {
    this.originalContent = originalContent;
    return this;
  }

  public void unsetOriginalContent() {
    this.originalContent = null;
  }

  /** Returns true if field originalContent is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalContent() {
    return this.originalContent != null;
  }

  public void setOriginalContentIsSet(boolean value) {
    if (!value) {
      this.originalContent = null;
    }
  }

  /**
   * 评论产生时间
   */
  public long getCreateTimeMillis() {
    return this.createTimeMillis;
  }

  /**
   * 评论产生时间
   */
  public Comment setCreateTimeMillis(long createTimeMillis) {
    this.createTimeMillis = createTimeMillis;
    setCreateTimeMillisIsSet(true);
    return this;
  }

  public void unsetCreateTimeMillis() {
    __isset_bit_vector.clear(__CREATETIMEMILLIS_ISSET_ID);
  }

  /** Returns true if field createTimeMillis is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeMillis() {
    return __isset_bit_vector.get(__CREATETIMEMILLIS_ISSET_ID);
  }

  public void setCreateTimeMillisIsSet(boolean value) {
    __isset_bit_vector.set(__CREATETIMEMILLIS_ISSET_ID, value);
  }

  /**
   * 悄悄话用户id，该id可以看这条悄悄话
   */
  public int getWhipserId() {
    return this.whipserId;
  }

  /**
   * 悄悄话用户id，该id可以看这条悄悄话
   */
  public Comment setWhipserId(int whipserId) {
    this.whipserId = whipserId;
    setWhipserIdIsSet(true);
    return this;
  }

  public void unsetWhipserId() {
    __isset_bit_vector.clear(__WHIPSERID_ISSET_ID);
  }

  /** Returns true if field whipserId is set (has been assigned a value) and false otherwise */
  public boolean isSetWhipserId() {
    return __isset_bit_vector.get(__WHIPSERID_ISSET_ID);
  }

  public void setWhipserIdIsSet(boolean value) {
    __isset_bit_vector.set(__WHIPSERID_ISSET_ID, value);
  }

  /**
   * 被回复者用户
   */
  public RepliedUser getReplyToUser() {
    return this.replyToUser;
  }

  /**
   * 被回复者用户
   */
  public Comment setReplyToUser(RepliedUser replyToUser) {
    this.replyToUser = replyToUser;
    return this;
  }

  public void unsetReplyToUser() {
    this.replyToUser = null;
  }

  /** Returns true if field replyToUser is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyToUser() {
    return this.replyToUser != null;
  }

  public void setReplyToUserIsSet(boolean value) {
    if (!value) {
      this.replyToUser = null;
    }
  }

  /**
   * 被回复评论/楼层id
   */
  public long getToCommentId() {
    return this.toCommentId;
  }

  /**
   * 被回复评论/楼层id
   */
  public Comment setToCommentId(long toCommentId) {
    this.toCommentId = toCommentId;
    setToCommentIdIsSet(true);
    return this;
  }

  public void unsetToCommentId() {
    __isset_bit_vector.clear(__TOCOMMENTID_ISSET_ID);
  }

  /** Returns true if field toCommentId is set (has been assigned a value) and false otherwise */
  public boolean isSetToCommentId() {
    return __isset_bit_vector.get(__TOCOMMENTID_ISSET_ID);
  }

  public void setToCommentIdIsSet(boolean value) {
    __isset_bit_vector.set(__TOCOMMENTID_ISSET_ID, value);
  }

  /**
   * like 信息
   */
  public CommentLikeInfo getLikeInfo() {
    return this.likeInfo;
  }

  /**
   * like 信息
   */
  public Comment setLikeInfo(CommentLikeInfo likeInfo) {
    this.likeInfo = likeInfo;
    return this;
  }

  public void unsetLikeInfo() {
    this.likeInfo = null;
  }

  /** Returns true if field likeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetLikeInfo() {
    return this.likeInfo != null;
  }

  public void setLikeInfoIsSet(boolean value) {
    if (!value) {
      this.likeInfo = null;
    }
  }

  /**
   * 是否是语音评论
   */
  public boolean isVoiceComment() {
    return this.voiceComment;
  }

  /**
   * 是否是语音评论
   */
  public Comment setVoiceComment(boolean voiceComment) {
    this.voiceComment = voiceComment;
    setVoiceCommentIsSet(true);
    return this;
  }

  public void unsetVoiceComment() {
    __isset_bit_vector.clear(__VOICECOMMENT_ISSET_ID);
  }

  /** Returns true if field voiceComment is set (has been assigned a value) and false otherwise */
  public boolean isSetVoiceComment() {
    return __isset_bit_vector.get(__VOICECOMMENT_ISSET_ID);
  }

  public void setVoiceCommentIsSet(boolean value) {
    __isset_bit_vector.set(__VOICECOMMENT_ISSET_ID, value);
  }

  /**
   * 语音评论详细信息
   */
  public CommentVoiceInfo getVoiceInfo() {
    return this.voiceInfo;
  }

  /**
   * 语音评论详细信息
   */
  public Comment setVoiceInfo(CommentVoiceInfo voiceInfo) {
    this.voiceInfo = voiceInfo;
    return this;
  }

  public void unsetVoiceInfo() {
    this.voiceInfo = null;
  }

  /** Returns true if field voiceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetVoiceInfo() {
    return this.voiceInfo != null;
  }

  public void setVoiceInfoIsSet(boolean value) {
    if (!value) {
      this.voiceInfo = null;
    }
  }

  /**
   * 评论作者的vip icon url
   */
  public String getAuthorVipIcon() {
    return this.authorVipIcon;
  }

  /**
   * 评论作者的vip icon url
   */
  public Comment setAuthorVipIcon(String authorVipIcon) {
    this.authorVipIcon = authorVipIcon;
    return this;
  }

  public void unsetAuthorVipIcon() {
    this.authorVipIcon = null;
  }

  /** Returns true if field authorVipIcon is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorVipIcon() {
    return this.authorVipIcon != null;
  }

  public void setAuthorVipIconIsSet(boolean value) {
    if (!value) {
      this.authorVipIcon = null;
    }
  }

  /**
   * 保存评论的原有id，如果评论是从其他业务导入过来的话
   */
  public long getOriginalCommentId() {
    return this.originalCommentId;
  }

  /**
   * 保存评论的原有id，如果评论是从其他业务导入过来的话
   */
  public Comment setOriginalCommentId(long originalCommentId) {
    this.originalCommentId = originalCommentId;
    setOriginalCommentIdIsSet(true);
    return this;
  }

  public void unsetOriginalCommentId() {
    __isset_bit_vector.clear(__ORIGINALCOMMENTID_ISSET_ID);
  }

  /** Returns true if field originalCommentId is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalCommentId() {
    return __isset_bit_vector.get(__ORIGINALCOMMENTID_ISSET_ID);
  }

  public void setOriginalCommentIdIsSet(boolean value) {
    __isset_bit_vector.set(__ORIGINALCOMMENTID_ISSET_ID, value);
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(String key, String val) {
    if (this.params == null) {
      this.params = new HashMap<String,String>();
    }
    this.params.put(key, val);
  }

  /**
   * 扩展字段
   */
  public Map<String,String> getParams() {
    return this.params;
  }

  /**
   * 扩展字段
   */
  public Comment setParams(Map<String,String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  /**
   * 是否是linked评论
   */
  public boolean isLinkedComment() {
    return this.linkedComment;
  }

  /**
   * 是否是linked评论
   */
  public Comment setLinkedComment(boolean linkedComment) {
    this.linkedComment = linkedComment;
    setLinkedCommentIsSet(true);
    return this;
  }

  public void unsetLinkedComment() {
    __isset_bit_vector.clear(__LINKEDCOMMENT_ISSET_ID);
  }

  /** Returns true if field linkedComment is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkedComment() {
    return __isset_bit_vector.get(__LINKEDCOMMENT_ISSET_ID);
  }

  public void setLinkedCommentIsSet(boolean value) {
    __isset_bit_vector.set(__LINKEDCOMMENT_ISSET_ID, value);
  }

  /**
   * author是否是连续多天登录的(这样前端会判断是否显示成为橙名)
   */
  public boolean isAuthorKeepUse() {
    return this.authorKeepUse;
  }

  /**
   * author是否是连续多天登录的(这样前端会判断是否显示成为橙名)
   */
  public Comment setAuthorKeepUse(boolean authorKeepUse) {
    this.authorKeepUse = authorKeepUse;
    setAuthorKeepUseIsSet(true);
    return this;
  }

  public void unsetAuthorKeepUse() {
    __isset_bit_vector.clear(__AUTHORKEEPUSE_ISSET_ID);
  }

  /** Returns true if field authorKeepUse is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorKeepUse() {
    return __isset_bit_vector.get(__AUTHORKEEPUSE_ISSET_ID);
  }

  public void setAuthorKeepUseIsSet(boolean value) {
    __isset_bit_vector.set(__AUTHORKEEPUSE_ISSET_ID, value);
  }

  /**
   * 评论type
   * 
   * @see CommentType
   */
  public CommentType getType() {
    return this.type;
  }

  /**
   * 评论type
   * 
   * @see CommentType
   */
  public Comment setType(CommentType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 评论在一个entry下面的楼数
   */
  public int getFloor() {
    return this.floor;
  }

  /**
   * 评论在一个entry下面的楼数
   */
  public Comment setFloor(int floor) {
    this.floor = floor;
    setFloorIsSet(true);
    return this;
  }

  public void unsetFloor() {
    __isset_bit_vector.clear(__FLOOR_ISSET_ID);
  }

  /** Returns true if field floor is set (has been assigned a value) and false otherwise */
  public boolean isSetFloor() {
    return __isset_bit_vector.get(__FLOOR_ISSET_ID);
  }

  public void setFloorIsSet(boolean value) {
    __isset_bit_vector.set(__FLOOR_ISSET_ID, value);
  }

  /**
   * 嵌套进入一个简单comment对象
   */
  public SimpleComment getSimpleComment() {
    return this.simpleComment;
  }

  /**
   * 嵌套进入一个简单comment对象
   */
  public Comment setSimpleComment(SimpleComment simpleComment) {
    this.simpleComment = simpleComment;
    return this;
  }

  public void unsetSimpleComment() {
    this.simpleComment = null;
  }

  /** Returns true if field simpleComment is set (has been assigned a value) and false otherwise */
  public boolean isSetSimpleComment() {
    return this.simpleComment != null;
  }

  public void setSimpleCommentIsSet(boolean value) {
    if (!value) {
      this.simpleComment = null;
    }
  }

  /**
   * 评论附带图片的缩略图
   */
  public String getCommentPhotoUrl() {
    return this.commentPhotoUrl;
  }

  /**
   * 评论附带图片的缩略图
   */
  public Comment setCommentPhotoUrl(String commentPhotoUrl) {
    this.commentPhotoUrl = commentPhotoUrl;
    return this;
  }

  public void unsetCommentPhotoUrl() {
    this.commentPhotoUrl = null;
  }

  /** Returns true if field commentPhotoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentPhotoUrl() {
    return this.commentPhotoUrl != null;
  }

  public void setCommentPhotoUrlIsSet(boolean value) {
    if (!value) {
      this.commentPhotoUrl = null;
    }
  }

  /**
   * 评论附带图片的id
   */
  public long getCommentPhotoId() {
    return this.commentPhotoId;
  }

  /**
   * 评论附带图片的id
   */
  public Comment setCommentPhotoId(long commentPhotoId) {
    this.commentPhotoId = commentPhotoId;
    setCommentPhotoIdIsSet(true);
    return this;
  }

  public void unsetCommentPhotoId() {
    __isset_bit_vector.clear(__COMMENTPHOTOID_ISSET_ID);
  }

  /** Returns true if field commentPhotoId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentPhotoId() {
    return __isset_bit_vector.get(__COMMENTPHOTOID_ISSET_ID);
  }

  public void setCommentPhotoIdIsSet(boolean value) {
    __isset_bit_vector.set(__COMMENTPHOTOID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case AUTHOR_ID:
      if (value == null) {
        unsetAuthorId();
      } else {
        setAuthorId((Integer)value);
      }
      break;

    case ENTRY:
      if (value == null) {
        unsetEntry();
      } else {
        setEntry((Entry)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case AUTHOR_NAME:
      if (value == null) {
        unsetAuthorName();
      } else {
        setAuthorName((String)value);
      }
      break;

    case AUTHOR_HEAD:
      if (value == null) {
        unsetAuthorHead();
      } else {
        setAuthorHead((String)value);
      }
      break;

    case ORIGINAL_CONTENT:
      if (value == null) {
        unsetOriginalContent();
      } else {
        setOriginalContent((String)value);
      }
      break;

    case CREATE_TIME_MILLIS:
      if (value == null) {
        unsetCreateTimeMillis();
      } else {
        setCreateTimeMillis((Long)value);
      }
      break;

    case WHIPSER_ID:
      if (value == null) {
        unsetWhipserId();
      } else {
        setWhipserId((Integer)value);
      }
      break;

    case REPLY_TO_USER:
      if (value == null) {
        unsetReplyToUser();
      } else {
        setReplyToUser((RepliedUser)value);
      }
      break;

    case TO_COMMENT_ID:
      if (value == null) {
        unsetToCommentId();
      } else {
        setToCommentId((Long)value);
      }
      break;

    case LIKE_INFO:
      if (value == null) {
        unsetLikeInfo();
      } else {
        setLikeInfo((CommentLikeInfo)value);
      }
      break;

    case VOICE_COMMENT:
      if (value == null) {
        unsetVoiceComment();
      } else {
        setVoiceComment((Boolean)value);
      }
      break;

    case VOICE_INFO:
      if (value == null) {
        unsetVoiceInfo();
      } else {
        setVoiceInfo((CommentVoiceInfo)value);
      }
      break;

    case AUTHOR_VIP_ICON:
      if (value == null) {
        unsetAuthorVipIcon();
      } else {
        setAuthorVipIcon((String)value);
      }
      break;

    case ORIGINAL_COMMENT_ID:
      if (value == null) {
        unsetOriginalCommentId();
      } else {
        setOriginalCommentId((Long)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((Map<String,String>)value);
      }
      break;

    case LINKED_COMMENT:
      if (value == null) {
        unsetLinkedComment();
      } else {
        setLinkedComment((Boolean)value);
      }
      break;

    case AUTHOR_KEEP_USE:
      if (value == null) {
        unsetAuthorKeepUse();
      } else {
        setAuthorKeepUse((Boolean)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((CommentType)value);
      }
      break;

    case FLOOR:
      if (value == null) {
        unsetFloor();
      } else {
        setFloor((Integer)value);
      }
      break;

    case SIMPLE_COMMENT:
      if (value == null) {
        unsetSimpleComment();
      } else {
        setSimpleComment((SimpleComment)value);
      }
      break;

    case COMMENT_PHOTO_URL:
      if (value == null) {
        unsetCommentPhotoUrl();
      } else {
        setCommentPhotoUrl((String)value);
      }
      break;

    case COMMENT_PHOTO_ID:
      if (value == null) {
        unsetCommentPhotoId();
      } else {
        setCommentPhotoId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case AUTHOR_ID:
      return Integer.valueOf(getAuthorId());

    case ENTRY:
      return getEntry();

    case CONTENT:
      return getContent();

    case AUTHOR_NAME:
      return getAuthorName();

    case AUTHOR_HEAD:
      return getAuthorHead();

    case ORIGINAL_CONTENT:
      return getOriginalContent();

    case CREATE_TIME_MILLIS:
      return Long.valueOf(getCreateTimeMillis());

    case WHIPSER_ID:
      return Integer.valueOf(getWhipserId());

    case REPLY_TO_USER:
      return getReplyToUser();

    case TO_COMMENT_ID:
      return Long.valueOf(getToCommentId());

    case LIKE_INFO:
      return getLikeInfo();

    case VOICE_COMMENT:
      return Boolean.valueOf(isVoiceComment());

    case VOICE_INFO:
      return getVoiceInfo();

    case AUTHOR_VIP_ICON:
      return getAuthorVipIcon();

    case ORIGINAL_COMMENT_ID:
      return Long.valueOf(getOriginalCommentId());

    case PARAMS:
      return getParams();

    case LINKED_COMMENT:
      return Boolean.valueOf(isLinkedComment());

    case AUTHOR_KEEP_USE:
      return Boolean.valueOf(isAuthorKeepUse());

    case TYPE:
      return getType();

    case FLOOR:
      return Integer.valueOf(getFloor());

    case SIMPLE_COMMENT:
      return getSimpleComment();

    case COMMENT_PHOTO_URL:
      return getCommentPhotoUrl();

    case COMMENT_PHOTO_ID:
      return Long.valueOf(getCommentPhotoId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case AUTHOR_ID:
      return isSetAuthorId();
    case ENTRY:
      return isSetEntry();
    case CONTENT:
      return isSetContent();
    case AUTHOR_NAME:
      return isSetAuthorName();
    case AUTHOR_HEAD:
      return isSetAuthorHead();
    case ORIGINAL_CONTENT:
      return isSetOriginalContent();
    case CREATE_TIME_MILLIS:
      return isSetCreateTimeMillis();
    case WHIPSER_ID:
      return isSetWhipserId();
    case REPLY_TO_USER:
      return isSetReplyToUser();
    case TO_COMMENT_ID:
      return isSetToCommentId();
    case LIKE_INFO:
      return isSetLikeInfo();
    case VOICE_COMMENT:
      return isSetVoiceComment();
    case VOICE_INFO:
      return isSetVoiceInfo();
    case AUTHOR_VIP_ICON:
      return isSetAuthorVipIcon();
    case ORIGINAL_COMMENT_ID:
      return isSetOriginalCommentId();
    case PARAMS:
      return isSetParams();
    case LINKED_COMMENT:
      return isSetLinkedComment();
    case AUTHOR_KEEP_USE:
      return isSetAuthorKeepUse();
    case TYPE:
      return isSetType();
    case FLOOR:
      return isSetFloor();
    case SIMPLE_COMMENT:
      return isSetSimpleComment();
    case COMMENT_PHOTO_URL:
      return isSetCommentPhotoUrl();
    case COMMENT_PHOTO_ID:
      return isSetCommentPhotoId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Comment)
      return this.equals((Comment)that);
    return false;
  }

  public boolean equals(Comment that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_authorId = true;
    boolean that_present_authorId = true;
    if (this_present_authorId || that_present_authorId) {
      if (!(this_present_authorId && that_present_authorId))
        return false;
      if (this.authorId != that.authorId)
        return false;
    }

    boolean this_present_entry = true && this.isSetEntry();
    boolean that_present_entry = true && that.isSetEntry();
    if (this_present_entry || that_present_entry) {
      if (!(this_present_entry && that_present_entry))
        return false;
      if (!this.entry.equals(that.entry))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_authorName = true && this.isSetAuthorName();
    boolean that_present_authorName = true && that.isSetAuthorName();
    if (this_present_authorName || that_present_authorName) {
      if (!(this_present_authorName && that_present_authorName))
        return false;
      if (!this.authorName.equals(that.authorName))
        return false;
    }

    boolean this_present_authorHead = true && this.isSetAuthorHead();
    boolean that_present_authorHead = true && that.isSetAuthorHead();
    if (this_present_authorHead || that_present_authorHead) {
      if (!(this_present_authorHead && that_present_authorHead))
        return false;
      if (!this.authorHead.equals(that.authorHead))
        return false;
    }

    boolean this_present_originalContent = true && this.isSetOriginalContent();
    boolean that_present_originalContent = true && that.isSetOriginalContent();
    if (this_present_originalContent || that_present_originalContent) {
      if (!(this_present_originalContent && that_present_originalContent))
        return false;
      if (!this.originalContent.equals(that.originalContent))
        return false;
    }

    boolean this_present_createTimeMillis = true;
    boolean that_present_createTimeMillis = true;
    if (this_present_createTimeMillis || that_present_createTimeMillis) {
      if (!(this_present_createTimeMillis && that_present_createTimeMillis))
        return false;
      if (this.createTimeMillis != that.createTimeMillis)
        return false;
    }

    boolean this_present_whipserId = true && this.isSetWhipserId();
    boolean that_present_whipserId = true && that.isSetWhipserId();
    if (this_present_whipserId || that_present_whipserId) {
      if (!(this_present_whipserId && that_present_whipserId))
        return false;
      if (this.whipserId != that.whipserId)
        return false;
    }

    boolean this_present_replyToUser = true && this.isSetReplyToUser();
    boolean that_present_replyToUser = true && that.isSetReplyToUser();
    if (this_present_replyToUser || that_present_replyToUser) {
      if (!(this_present_replyToUser && that_present_replyToUser))
        return false;
      if (!this.replyToUser.equals(that.replyToUser))
        return false;
    }

    boolean this_present_toCommentId = true && this.isSetToCommentId();
    boolean that_present_toCommentId = true && that.isSetToCommentId();
    if (this_present_toCommentId || that_present_toCommentId) {
      if (!(this_present_toCommentId && that_present_toCommentId))
        return false;
      if (this.toCommentId != that.toCommentId)
        return false;
    }

    boolean this_present_likeInfo = true && this.isSetLikeInfo();
    boolean that_present_likeInfo = true && that.isSetLikeInfo();
    if (this_present_likeInfo || that_present_likeInfo) {
      if (!(this_present_likeInfo && that_present_likeInfo))
        return false;
      if (!this.likeInfo.equals(that.likeInfo))
        return false;
    }

    boolean this_present_voiceComment = true && this.isSetVoiceComment();
    boolean that_present_voiceComment = true && that.isSetVoiceComment();
    if (this_present_voiceComment || that_present_voiceComment) {
      if (!(this_present_voiceComment && that_present_voiceComment))
        return false;
      if (this.voiceComment != that.voiceComment)
        return false;
    }

    boolean this_present_voiceInfo = true && this.isSetVoiceInfo();
    boolean that_present_voiceInfo = true && that.isSetVoiceInfo();
    if (this_present_voiceInfo || that_present_voiceInfo) {
      if (!(this_present_voiceInfo && that_present_voiceInfo))
        return false;
      if (!this.voiceInfo.equals(that.voiceInfo))
        return false;
    }

    boolean this_present_authorVipIcon = true && this.isSetAuthorVipIcon();
    boolean that_present_authorVipIcon = true && that.isSetAuthorVipIcon();
    if (this_present_authorVipIcon || that_present_authorVipIcon) {
      if (!(this_present_authorVipIcon && that_present_authorVipIcon))
        return false;
      if (!this.authorVipIcon.equals(that.authorVipIcon))
        return false;
    }

    boolean this_present_originalCommentId = true && this.isSetOriginalCommentId();
    boolean that_present_originalCommentId = true && that.isSetOriginalCommentId();
    if (this_present_originalCommentId || that_present_originalCommentId) {
      if (!(this_present_originalCommentId && that_present_originalCommentId))
        return false;
      if (this.originalCommentId != that.originalCommentId)
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_linkedComment = true && this.isSetLinkedComment();
    boolean that_present_linkedComment = true && that.isSetLinkedComment();
    if (this_present_linkedComment || that_present_linkedComment) {
      if (!(this_present_linkedComment && that_present_linkedComment))
        return false;
      if (this.linkedComment != that.linkedComment)
        return false;
    }

    boolean this_present_authorKeepUse = true && this.isSetAuthorKeepUse();
    boolean that_present_authorKeepUse = true && that.isSetAuthorKeepUse();
    if (this_present_authorKeepUse || that_present_authorKeepUse) {
      if (!(this_present_authorKeepUse && that_present_authorKeepUse))
        return false;
      if (this.authorKeepUse != that.authorKeepUse)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_floor = true && this.isSetFloor();
    boolean that_present_floor = true && that.isSetFloor();
    if (this_present_floor || that_present_floor) {
      if (!(this_present_floor && that_present_floor))
        return false;
      if (this.floor != that.floor)
        return false;
    }

    boolean this_present_simpleComment = true && this.isSetSimpleComment();
    boolean that_present_simpleComment = true && that.isSetSimpleComment();
    if (this_present_simpleComment || that_present_simpleComment) {
      if (!(this_present_simpleComment && that_present_simpleComment))
        return false;
      if (!this.simpleComment.equals(that.simpleComment))
        return false;
    }

    boolean this_present_commentPhotoUrl = true && this.isSetCommentPhotoUrl();
    boolean that_present_commentPhotoUrl = true && that.isSetCommentPhotoUrl();
    if (this_present_commentPhotoUrl || that_present_commentPhotoUrl) {
      if (!(this_present_commentPhotoUrl && that_present_commentPhotoUrl))
        return false;
      if (!this.commentPhotoUrl.equals(that.commentPhotoUrl))
        return false;
    }

    boolean this_present_commentPhotoId = true && this.isSetCommentPhotoId();
    boolean that_present_commentPhotoId = true && that.isSetCommentPhotoId();
    if (this_present_commentPhotoId || that_present_commentPhotoId) {
      if (!(this_present_commentPhotoId && that_present_commentPhotoId))
        return false;
      if (this.commentPhotoId != that.commentPhotoId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_authorId = true;
    builder.append(present_authorId);
    if (present_authorId)
      builder.append(authorId);

    boolean present_entry = true && (isSetEntry());
    builder.append(present_entry);
    if (present_entry)
      builder.append(entry);

    boolean present_content = true && (isSetContent());
    builder.append(present_content);
    if (present_content)
      builder.append(content);

    boolean present_authorName = true && (isSetAuthorName());
    builder.append(present_authorName);
    if (present_authorName)
      builder.append(authorName);

    boolean present_authorHead = true && (isSetAuthorHead());
    builder.append(present_authorHead);
    if (present_authorHead)
      builder.append(authorHead);

    boolean present_originalContent = true && (isSetOriginalContent());
    builder.append(present_originalContent);
    if (present_originalContent)
      builder.append(originalContent);

    boolean present_createTimeMillis = true;
    builder.append(present_createTimeMillis);
    if (present_createTimeMillis)
      builder.append(createTimeMillis);

    boolean present_whipserId = true && (isSetWhipserId());
    builder.append(present_whipserId);
    if (present_whipserId)
      builder.append(whipserId);

    boolean present_replyToUser = true && (isSetReplyToUser());
    builder.append(present_replyToUser);
    if (present_replyToUser)
      builder.append(replyToUser);

    boolean present_toCommentId = true && (isSetToCommentId());
    builder.append(present_toCommentId);
    if (present_toCommentId)
      builder.append(toCommentId);

    boolean present_likeInfo = true && (isSetLikeInfo());
    builder.append(present_likeInfo);
    if (present_likeInfo)
      builder.append(likeInfo);

    boolean present_voiceComment = true && (isSetVoiceComment());
    builder.append(present_voiceComment);
    if (present_voiceComment)
      builder.append(voiceComment);

    boolean present_voiceInfo = true && (isSetVoiceInfo());
    builder.append(present_voiceInfo);
    if (present_voiceInfo)
      builder.append(voiceInfo);

    boolean present_authorVipIcon = true && (isSetAuthorVipIcon());
    builder.append(present_authorVipIcon);
    if (present_authorVipIcon)
      builder.append(authorVipIcon);

    boolean present_originalCommentId = true && (isSetOriginalCommentId());
    builder.append(present_originalCommentId);
    if (present_originalCommentId)
      builder.append(originalCommentId);

    boolean present_params = true && (isSetParams());
    builder.append(present_params);
    if (present_params)
      builder.append(params);

    boolean present_linkedComment = true && (isSetLinkedComment());
    builder.append(present_linkedComment);
    if (present_linkedComment)
      builder.append(linkedComment);

    boolean present_authorKeepUse = true && (isSetAuthorKeepUse());
    builder.append(present_authorKeepUse);
    if (present_authorKeepUse)
      builder.append(authorKeepUse);

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type.getValue());

    boolean present_floor = true && (isSetFloor());
    builder.append(present_floor);
    if (present_floor)
      builder.append(floor);

    boolean present_simpleComment = true && (isSetSimpleComment());
    builder.append(present_simpleComment);
    if (present_simpleComment)
      builder.append(simpleComment);

    boolean present_commentPhotoUrl = true && (isSetCommentPhotoUrl());
    builder.append(present_commentPhotoUrl);
    if (present_commentPhotoUrl)
      builder.append(commentPhotoUrl);

    boolean present_commentPhotoId = true && (isSetCommentPhotoId());
    builder.append(present_commentPhotoId);
    if (present_commentPhotoId)
      builder.append(commentPhotoId);

    return builder.toHashCode();
  }

  public int compareTo(Comment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Comment typedOther = (Comment)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorId()).compareTo(typedOther.isSetAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorId, typedOther.authorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntry()).compareTo(typedOther.isSetEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry, typedOther.entry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorName()).compareTo(typedOther.isSetAuthorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorName, typedOther.authorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorHead()).compareTo(typedOther.isSetAuthorHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorHead, typedOther.authorHead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalContent()).compareTo(typedOther.isSetOriginalContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalContent, typedOther.originalContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeMillis()).compareTo(typedOther.isSetCreateTimeMillis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeMillis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeMillis, typedOther.createTimeMillis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhipserId()).compareTo(typedOther.isSetWhipserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhipserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whipserId, typedOther.whipserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyToUser()).compareTo(typedOther.isSetReplyToUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyToUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyToUser, typedOther.replyToUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToCommentId()).compareTo(typedOther.isSetToCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toCommentId, typedOther.toCommentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikeInfo()).compareTo(typedOther.isSetLikeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likeInfo, typedOther.likeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoiceComment()).compareTo(typedOther.isSetVoiceComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoiceComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voiceComment, typedOther.voiceComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoiceInfo()).compareTo(typedOther.isSetVoiceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoiceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voiceInfo, typedOther.voiceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorVipIcon()).compareTo(typedOther.isSetAuthorVipIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorVipIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorVipIcon, typedOther.authorVipIcon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalCommentId()).compareTo(typedOther.isSetOriginalCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalCommentId, typedOther.originalCommentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkedComment()).compareTo(typedOther.isSetLinkedComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkedComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkedComment, typedOther.linkedComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorKeepUse()).compareTo(typedOther.isSetAuthorKeepUse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorKeepUse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorKeepUse, typedOther.authorKeepUse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloor()).compareTo(typedOther.isSetFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floor, typedOther.floor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimpleComment()).compareTo(typedOther.isSetSimpleComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimpleComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleComment, typedOther.simpleComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentPhotoUrl()).compareTo(typedOther.isSetCommentPhotoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentPhotoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentPhotoUrl, typedOther.commentPhotoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommentPhotoId()).compareTo(typedOther.isSetCommentPhotoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentPhotoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentPhotoId, typedOther.commentPhotoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Comment(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorId:");
    sb.append(this.authorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entry:");
    if (this.entry == null) {
      sb.append("null");
    } else {
      sb.append(this.entry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorName:");
    if (this.authorName == null) {
      sb.append("null");
    } else {
      sb.append(this.authorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorHead:");
    if (this.authorHead == null) {
      sb.append("null");
    } else {
      sb.append(this.authorHead);
    }
    first = false;
    if (isSetOriginalContent()) {
      if (!first) sb.append(", ");
      sb.append("originalContent:");
      if (this.originalContent == null) {
        sb.append("null");
      } else {
        sb.append(this.originalContent);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("createTimeMillis:");
    sb.append(this.createTimeMillis);
    first = false;
    if (isSetWhipserId()) {
      if (!first) sb.append(", ");
      sb.append("whipserId:");
      sb.append(this.whipserId);
      first = false;
    }
    if (isSetReplyToUser()) {
      if (!first) sb.append(", ");
      sb.append("replyToUser:");
      if (this.replyToUser == null) {
        sb.append("null");
      } else {
        sb.append(this.replyToUser);
      }
      first = false;
    }
    if (isSetToCommentId()) {
      if (!first) sb.append(", ");
      sb.append("toCommentId:");
      sb.append(this.toCommentId);
      first = false;
    }
    if (isSetLikeInfo()) {
      if (!first) sb.append(", ");
      sb.append("likeInfo:");
      if (this.likeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.likeInfo);
      }
      first = false;
    }
    if (isSetVoiceComment()) {
      if (!first) sb.append(", ");
      sb.append("voiceComment:");
      sb.append(this.voiceComment);
      first = false;
    }
    if (isSetVoiceInfo()) {
      if (!first) sb.append(", ");
      sb.append("voiceInfo:");
      if (this.voiceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.voiceInfo);
      }
      first = false;
    }
    if (isSetAuthorVipIcon()) {
      if (!first) sb.append(", ");
      sb.append("authorVipIcon:");
      if (this.authorVipIcon == null) {
        sb.append("null");
      } else {
        sb.append(this.authorVipIcon);
      }
      first = false;
    }
    if (isSetOriginalCommentId()) {
      if (!first) sb.append(", ");
      sb.append("originalCommentId:");
      sb.append(this.originalCommentId);
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetLinkedComment()) {
      if (!first) sb.append(", ");
      sb.append("linkedComment:");
      sb.append(this.linkedComment);
      first = false;
    }
    if (isSetAuthorKeepUse()) {
      if (!first) sb.append(", ");
      sb.append("authorKeepUse:");
      sb.append(this.authorKeepUse);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetFloor()) {
      if (!first) sb.append(", ");
      sb.append("floor:");
      sb.append(this.floor);
      first = false;
    }
    if (isSetSimpleComment()) {
      if (!first) sb.append(", ");
      sb.append("simpleComment:");
      if (this.simpleComment == null) {
        sb.append("null");
      } else {
        sb.append(this.simpleComment);
      }
      first = false;
    }
    if (isSetCommentPhotoUrl()) {
      if (!first) sb.append(", ");
      sb.append("commentPhotoUrl:");
      if (this.commentPhotoUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.commentPhotoUrl);
      }
      first = false;
    }
    if (isSetCommentPhotoId()) {
      if (!first) sb.append(", ");
      sb.append("commentPhotoId:");
      sb.append(this.commentPhotoId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommentStandardSchemeFactory implements SchemeFactory {
    public CommentStandardScheme getScheme() {
      return new CommentStandardScheme();
    }
  }

  private static class CommentStandardScheme extends StandardScheme<Comment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Comment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authorId = iprot.readI32();
              struct.setAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entry = new Entry();
              struct.entry.read(iprot);
              struct.setEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTHOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorName = iprot.readString();
              struct.setAuthorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTHOR_HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorHead = iprot.readString();
              struct.setAuthorHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORIGINAL_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalContent = iprot.readString();
              struct.setOriginalContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIME_MILLIS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeMillis = iprot.readI64();
              struct.setCreateTimeMillisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WHIPSER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.whipserId = iprot.readI32();
              struct.setWhipserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REPLY_TO_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.replyToUser = new RepliedUser();
              struct.replyToUser.read(iprot);
              struct.setReplyToUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TO_COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toCommentId = iprot.readI64();
              struct.setToCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LIKE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.likeInfo = new CommentLikeInfo();
              struct.likeInfo.read(iprot);
              struct.setLikeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VOICE_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.voiceComment = iprot.readBool();
              struct.setVoiceCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // VOICE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.voiceInfo = new CommentVoiceInfo();
              struct.voiceInfo.read(iprot);
              struct.setVoiceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // AUTHOR_VIP_ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorVipIcon = iprot.readString();
              struct.setAuthorVipIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ORIGINAL_COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.originalCommentId = iprot.readI64();
              struct.setOriginalCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.params = new HashMap<String,String>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  String _key12; // required
                  String _val13; // required
                  _key12 = iprot.readString();
                  _val13 = iprot.readString();
                  struct.params.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LINKED_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.linkedComment = iprot.readBool();
              struct.setLinkedCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // AUTHOR_KEEP_USE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.authorKeepUse = iprot.readBool();
              struct.setAuthorKeepUseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = CommentType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.floor = iprot.readI32();
              struct.setFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // SIMPLE_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.simpleComment = new SimpleComment();
              struct.simpleComment.read(iprot);
              struct.setSimpleCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // COMMENT_PHOTO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commentPhotoUrl = iprot.readString();
              struct.setCommentPhotoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // COMMENT_PHOTO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commentPhotoId = iprot.readI64();
              struct.setCommentPhotoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Comment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
      oprot.writeI32(struct.authorId);
      oprot.writeFieldEnd();
      if (struct.entry != null) {
        oprot.writeFieldBegin(ENTRY_FIELD_DESC);
        struct.entry.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.authorName != null) {
        oprot.writeFieldBegin(AUTHOR_NAME_FIELD_DESC);
        oprot.writeString(struct.authorName);
        oprot.writeFieldEnd();
      }
      if (struct.authorHead != null) {
        oprot.writeFieldBegin(AUTHOR_HEAD_FIELD_DESC);
        oprot.writeString(struct.authorHead);
        oprot.writeFieldEnd();
      }
      if (struct.originalContent != null) {
        if (struct.isSetOriginalContent()) {
          oprot.writeFieldBegin(ORIGINAL_CONTENT_FIELD_DESC);
          oprot.writeString(struct.originalContent);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CREATE_TIME_MILLIS_FIELD_DESC);
      oprot.writeI64(struct.createTimeMillis);
      oprot.writeFieldEnd();
      if (struct.isSetWhipserId()) {
        oprot.writeFieldBegin(WHIPSER_ID_FIELD_DESC);
        oprot.writeI32(struct.whipserId);
        oprot.writeFieldEnd();
      }
      if (struct.replyToUser != null) {
        if (struct.isSetReplyToUser()) {
          oprot.writeFieldBegin(REPLY_TO_USER_FIELD_DESC);
          struct.replyToUser.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetToCommentId()) {
        oprot.writeFieldBegin(TO_COMMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.toCommentId);
        oprot.writeFieldEnd();
      }
      if (struct.likeInfo != null) {
        if (struct.isSetLikeInfo()) {
          oprot.writeFieldBegin(LIKE_INFO_FIELD_DESC);
          struct.likeInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVoiceComment()) {
        oprot.writeFieldBegin(VOICE_COMMENT_FIELD_DESC);
        oprot.writeBool(struct.voiceComment);
        oprot.writeFieldEnd();
      }
      if (struct.voiceInfo != null) {
        if (struct.isSetVoiceInfo()) {
          oprot.writeFieldBegin(VOICE_INFO_FIELD_DESC);
          struct.voiceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.authorVipIcon != null) {
        if (struct.isSetAuthorVipIcon()) {
          oprot.writeFieldBegin(AUTHOR_VIP_ICON_FIELD_DESC);
          oprot.writeString(struct.authorVipIcon);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOriginalCommentId()) {
        oprot.writeFieldBegin(ORIGINAL_COMMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.originalCommentId);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter14 : struct.params.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLinkedComment()) {
        oprot.writeFieldBegin(LINKED_COMMENT_FIELD_DESC);
        oprot.writeBool(struct.linkedComment);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAuthorKeepUse()) {
        oprot.writeFieldBegin(AUTHOR_KEEP_USE_FIELD_DESC);
        oprot.writeBool(struct.authorKeepUse);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFloor()) {
        oprot.writeFieldBegin(FLOOR_FIELD_DESC);
        oprot.writeI32(struct.floor);
        oprot.writeFieldEnd();
      }
      if (struct.simpleComment != null) {
        if (struct.isSetSimpleComment()) {
          oprot.writeFieldBegin(SIMPLE_COMMENT_FIELD_DESC);
          struct.simpleComment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commentPhotoUrl != null) {
        if (struct.isSetCommentPhotoUrl()) {
          oprot.writeFieldBegin(COMMENT_PHOTO_URL_FIELD_DESC);
          oprot.writeString(struct.commentPhotoUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommentPhotoId()) {
        oprot.writeFieldBegin(COMMENT_PHOTO_ID_FIELD_DESC);
        oprot.writeI64(struct.commentPhotoId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommentTupleSchemeFactory implements SchemeFactory {
    public CommentTupleScheme getScheme() {
      return new CommentTupleScheme();
    }
  }

  private static class CommentTupleScheme extends TupleScheme<Comment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Comment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAuthorId()) {
        optionals.set(1);
      }
      if (struct.isSetEntry()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetAuthorName()) {
        optionals.set(4);
      }
      if (struct.isSetAuthorHead()) {
        optionals.set(5);
      }
      if (struct.isSetOriginalContent()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTimeMillis()) {
        optionals.set(7);
      }
      if (struct.isSetWhipserId()) {
        optionals.set(8);
      }
      if (struct.isSetReplyToUser()) {
        optionals.set(9);
      }
      if (struct.isSetToCommentId()) {
        optionals.set(10);
      }
      if (struct.isSetLikeInfo()) {
        optionals.set(11);
      }
      if (struct.isSetVoiceComment()) {
        optionals.set(12);
      }
      if (struct.isSetVoiceInfo()) {
        optionals.set(13);
      }
      if (struct.isSetAuthorVipIcon()) {
        optionals.set(14);
      }
      if (struct.isSetOriginalCommentId()) {
        optionals.set(15);
      }
      if (struct.isSetParams()) {
        optionals.set(16);
      }
      if (struct.isSetLinkedComment()) {
        optionals.set(17);
      }
      if (struct.isSetAuthorKeepUse()) {
        optionals.set(18);
      }
      if (struct.isSetType()) {
        optionals.set(19);
      }
      if (struct.isSetFloor()) {
        optionals.set(20);
      }
      if (struct.isSetSimpleComment()) {
        optionals.set(21);
      }
      if (struct.isSetCommentPhotoUrl()) {
        optionals.set(22);
      }
      if (struct.isSetCommentPhotoId()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetAuthorId()) {
        oprot.writeI32(struct.authorId);
      }
      if (struct.isSetEntry()) {
        struct.entry.write(oprot);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetAuthorName()) {
        oprot.writeString(struct.authorName);
      }
      if (struct.isSetAuthorHead()) {
        oprot.writeString(struct.authorHead);
      }
      if (struct.isSetOriginalContent()) {
        oprot.writeString(struct.originalContent);
      }
      if (struct.isSetCreateTimeMillis()) {
        oprot.writeI64(struct.createTimeMillis);
      }
      if (struct.isSetWhipserId()) {
        oprot.writeI32(struct.whipserId);
      }
      if (struct.isSetReplyToUser()) {
        struct.replyToUser.write(oprot);
      }
      if (struct.isSetToCommentId()) {
        oprot.writeI64(struct.toCommentId);
      }
      if (struct.isSetLikeInfo()) {
        struct.likeInfo.write(oprot);
      }
      if (struct.isSetVoiceComment()) {
        oprot.writeBool(struct.voiceComment);
      }
      if (struct.isSetVoiceInfo()) {
        struct.voiceInfo.write(oprot);
      }
      if (struct.isSetAuthorVipIcon()) {
        oprot.writeString(struct.authorVipIcon);
      }
      if (struct.isSetOriginalCommentId()) {
        oprot.writeI64(struct.originalCommentId);
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (Map.Entry<String, String> _iter15 : struct.params.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
      if (struct.isSetLinkedComment()) {
        oprot.writeBool(struct.linkedComment);
      }
      if (struct.isSetAuthorKeepUse()) {
        oprot.writeBool(struct.authorKeepUse);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetFloor()) {
        oprot.writeI32(struct.floor);
      }
      if (struct.isSetSimpleComment()) {
        struct.simpleComment.write(oprot);
      }
      if (struct.isSetCommentPhotoUrl()) {
        oprot.writeString(struct.commentPhotoUrl);
      }
      if (struct.isSetCommentPhotoId()) {
        oprot.writeI64(struct.commentPhotoId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Comment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.authorId = iprot.readI32();
        struct.setAuthorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entry = new Entry();
        struct.entry.read(iprot);
        struct.setEntryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.authorName = iprot.readString();
        struct.setAuthorNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.authorHead = iprot.readString();
        struct.setAuthorHeadIsSet(true);
      }
      if (incoming.get(6)) {
        struct.originalContent = iprot.readString();
        struct.setOriginalContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTimeMillis = iprot.readI64();
        struct.setCreateTimeMillisIsSet(true);
      }
      if (incoming.get(8)) {
        struct.whipserId = iprot.readI32();
        struct.setWhipserIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.replyToUser = new RepliedUser();
        struct.replyToUser.read(iprot);
        struct.setReplyToUserIsSet(true);
      }
      if (incoming.get(10)) {
        struct.toCommentId = iprot.readI64();
        struct.setToCommentIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.likeInfo = new CommentLikeInfo();
        struct.likeInfo.read(iprot);
        struct.setLikeInfoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.voiceComment = iprot.readBool();
        struct.setVoiceCommentIsSet(true);
      }
      if (incoming.get(13)) {
        struct.voiceInfo = new CommentVoiceInfo();
        struct.voiceInfo.read(iprot);
        struct.setVoiceInfoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.authorVipIcon = iprot.readString();
        struct.setAuthorVipIconIsSet(true);
      }
      if (incoming.get(15)) {
        struct.originalCommentId = iprot.readI64();
        struct.setOriginalCommentIdIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new HashMap<String,String>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18; // required
            String _val19; // required
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            struct.params.put(_key18, _val19);
          }
        }
        struct.setParamsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.linkedComment = iprot.readBool();
        struct.setLinkedCommentIsSet(true);
      }
      if (incoming.get(18)) {
        struct.authorKeepUse = iprot.readBool();
        struct.setAuthorKeepUseIsSet(true);
      }
      if (incoming.get(19)) {
        struct.type = CommentType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.floor = iprot.readI32();
        struct.setFloorIsSet(true);
      }
      if (incoming.get(21)) {
        struct.simpleComment = new SimpleComment();
        struct.simpleComment.read(iprot);
        struct.setSimpleCommentIsSet(true);
      }
      if (incoming.get(22)) {
        struct.commentPhotoUrl = iprot.readString();
        struct.setCommentPhotoUrlIsSet(true);
      }
      if (incoming.get(23)) {
        struct.commentPhotoId = iprot.readI64();
        struct.setCommentPhotoIdIsSet(true);
      }
    }
  }

}

