/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.ugc.comment.xoa2;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 评论被关联的信息
 */
public class CommentLinkedInfo implements org.apache.thrift.TBase<CommentLinkedInfo, CommentLinkedInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommentLinkedInfo");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRY_OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryOwnerId", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommentLinkedInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommentLinkedInfoTupleSchemeFactory());
  }

  /**
   * 评论业务类型
   * 
   * @see CommentType
   */
  public CommentType type; // required
  /**
   * 被评论实体Id
   */
  public long entryId; // required
  /**
   * 被评论实体所有者Id
   */
  public int entryOwnerId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 评论业务类型
     * 
     * @see CommentType
     */
    TYPE((short)1, "type"),
    /**
     * 被评论实体Id
     */
    ENTRY_ID((short)2, "entryId"),
    /**
     * 被评论实体所有者Id
     */
    ENTRY_OWNER_ID((short)3, "entryOwnerId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // ENTRY_ID
          return ENTRY_ID;
        case 3: // ENTRY_OWNER_ID
          return ENTRY_OWNER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENTRYID_ISSET_ID = 0;
  private static final int __ENTRYOWNERID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommentType.class)));
    tmpMap.put(_Fields.ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("entryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENTRY_OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("entryOwnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommentLinkedInfo.class, metaDataMap);
  }

  public CommentLinkedInfo() {
  }

  public CommentLinkedInfo(
    CommentType type,
    long entryId,
    int entryOwnerId)
  {
    this();
    this.type = type;
    this.entryId = entryId;
    setEntryIdIsSet(true);
    this.entryOwnerId = entryOwnerId;
    setEntryOwnerIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommentLinkedInfo(CommentLinkedInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.entryId = other.entryId;
    this.entryOwnerId = other.entryOwnerId;
  }

  public CommentLinkedInfo deepCopy() {
    return new CommentLinkedInfo(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setEntryIdIsSet(false);
    this.entryId = 0;
    setEntryOwnerIdIsSet(false);
    this.entryOwnerId = 0;
  }

  /**
   * 评论业务类型
   * 
   * @see CommentType
   */
  public CommentType getType() {
    return this.type;
  }

  /**
   * 评论业务类型
   * 
   * @see CommentType
   */
  public CommentLinkedInfo setType(CommentType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 被评论实体Id
   */
  public long getEntryId() {
    return this.entryId;
  }

  /**
   * 被评论实体Id
   */
  public CommentLinkedInfo setEntryId(long entryId) {
    this.entryId = entryId;
    setEntryIdIsSet(true);
    return this;
  }

  public void unsetEntryId() {
    __isset_bit_vector.clear(__ENTRYID_ISSET_ID);
  }

  /** Returns true if field entryId is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryId() {
    return __isset_bit_vector.get(__ENTRYID_ISSET_ID);
  }

  public void setEntryIdIsSet(boolean value) {
    __isset_bit_vector.set(__ENTRYID_ISSET_ID, value);
  }

  /**
   * 被评论实体所有者Id
   */
  public int getEntryOwnerId() {
    return this.entryOwnerId;
  }

  /**
   * 被评论实体所有者Id
   */
  public CommentLinkedInfo setEntryOwnerId(int entryOwnerId) {
    this.entryOwnerId = entryOwnerId;
    setEntryOwnerIdIsSet(true);
    return this;
  }

  public void unsetEntryOwnerId() {
    __isset_bit_vector.clear(__ENTRYOWNERID_ISSET_ID);
  }

  /** Returns true if field entryOwnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryOwnerId() {
    return __isset_bit_vector.get(__ENTRYOWNERID_ISSET_ID);
  }

  public void setEntryOwnerIdIsSet(boolean value) {
    __isset_bit_vector.set(__ENTRYOWNERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((CommentType)value);
      }
      break;

    case ENTRY_ID:
      if (value == null) {
        unsetEntryId();
      } else {
        setEntryId((Long)value);
      }
      break;

    case ENTRY_OWNER_ID:
      if (value == null) {
        unsetEntryOwnerId();
      } else {
        setEntryOwnerId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case ENTRY_ID:
      return Long.valueOf(getEntryId());

    case ENTRY_OWNER_ID:
      return Integer.valueOf(getEntryOwnerId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case ENTRY_ID:
      return isSetEntryId();
    case ENTRY_OWNER_ID:
      return isSetEntryOwnerId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommentLinkedInfo)
      return this.equals((CommentLinkedInfo)that);
    return false;
  }

  public boolean equals(CommentLinkedInfo that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_entryId = true;
    boolean that_present_entryId = true;
    if (this_present_entryId || that_present_entryId) {
      if (!(this_present_entryId && that_present_entryId))
        return false;
      if (this.entryId != that.entryId)
        return false;
    }

    boolean this_present_entryOwnerId = true;
    boolean that_present_entryOwnerId = true;
    if (this_present_entryOwnerId || that_present_entryOwnerId) {
      if (!(this_present_entryOwnerId && that_present_entryOwnerId))
        return false;
      if (this.entryOwnerId != that.entryOwnerId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type.getValue());

    boolean present_entryId = true;
    builder.append(present_entryId);
    if (present_entryId)
      builder.append(entryId);

    boolean present_entryOwnerId = true;
    builder.append(present_entryOwnerId);
    if (present_entryOwnerId)
      builder.append(entryOwnerId);

    return builder.toHashCode();
  }

  public int compareTo(CommentLinkedInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CommentLinkedInfo typedOther = (CommentLinkedInfo)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryId()).compareTo(typedOther.isSetEntryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryId, typedOther.entryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryOwnerId()).compareTo(typedOther.isSetEntryOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryOwnerId, typedOther.entryOwnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommentLinkedInfo(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryId:");
    sb.append(this.entryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryOwnerId:");
    sb.append(this.entryOwnerId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommentLinkedInfoStandardSchemeFactory implements SchemeFactory {
    public CommentLinkedInfoStandardScheme getScheme() {
      return new CommentLinkedInfoStandardScheme();
    }
  }

  private static class CommentLinkedInfoStandardScheme extends StandardScheme<CommentLinkedInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommentLinkedInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = CommentType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entryId = iprot.readI64();
              struct.setEntryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRY_OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.entryOwnerId = iprot.readI32();
              struct.setEntryOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommentLinkedInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENTRY_ID_FIELD_DESC);
      oprot.writeI64(struct.entryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTRY_OWNER_ID_FIELD_DESC);
      oprot.writeI32(struct.entryOwnerId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommentLinkedInfoTupleSchemeFactory implements SchemeFactory {
    public CommentLinkedInfoTupleScheme getScheme() {
      return new CommentLinkedInfoTupleScheme();
    }
  }

  private static class CommentLinkedInfoTupleScheme extends TupleScheme<CommentLinkedInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommentLinkedInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetEntryId()) {
        optionals.set(1);
      }
      if (struct.isSetEntryOwnerId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetEntryId()) {
        oprot.writeI64(struct.entryId);
      }
      if (struct.isSetEntryOwnerId()) {
        oprot.writeI32(struct.entryOwnerId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommentLinkedInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.type = CommentType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.entryId = iprot.readI64();
        struct.setEntryIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entryOwnerId = iprot.readI32();
        struct.setEntryOwnerIdIsSet(true);
      }
    }
  }

}

