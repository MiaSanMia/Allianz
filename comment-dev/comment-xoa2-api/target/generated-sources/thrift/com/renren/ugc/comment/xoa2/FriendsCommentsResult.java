/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.ugc.comment.xoa2;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FriendsCommentsResult implements org.apache.thrift.TBase<FriendsCommentsResult, FriendsCommentsResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FriendsCommentsResult");

  private static final org.apache.thrift.protocol.TField COMMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("commentList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField MORE_FIELD_DESC = new org.apache.thrift.protocol.TField("more", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField EXTRA_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("extraKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryId", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FriendsCommentsResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FriendsCommentsResultTupleSchemeFactory());
  }

  /**
   * 获取的头部评论的列表
   */
  public List<Comment> commentList; // optional
  /**
   * 是否有更多的评论
   */
  public boolean more; // optional
  /**
   * 辅助字段
   */
  public String extraKey; // optional
  /**
   * 资源id
   */
  public long entryId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 获取的头部评论的列表
     */
    COMMENT_LIST((short)1, "commentList"),
    /**
     * 是否有更多的评论
     */
    MORE((short)2, "more"),
    /**
     * 辅助字段
     */
    EXTRA_KEY((short)3, "extraKey"),
    /**
     * 资源id
     */
    ENTRY_ID((short)4, "entryId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMENT_LIST
          return COMMENT_LIST;
        case 2: // MORE
          return MORE;
        case 3: // EXTRA_KEY
          return EXTRA_KEY;
        case 4: // ENTRY_ID
          return ENTRY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MORE_ISSET_ID = 0;
  private static final int __ENTRYID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.COMMENT_LIST,_Fields.MORE,_Fields.EXTRA_KEY,_Fields.ENTRY_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("commentList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Comment.class))));
    tmpMap.put(_Fields.MORE, new org.apache.thrift.meta_data.FieldMetaData("more", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXTRA_KEY, new org.apache.thrift.meta_data.FieldMetaData("extraKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("entryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FriendsCommentsResult.class, metaDataMap);
  }

  public FriendsCommentsResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FriendsCommentsResult(FriendsCommentsResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCommentList()) {
      List<Comment> __this__commentList = new ArrayList<Comment>();
      for (Comment other_element : other.commentList) {
        __this__commentList.add(new Comment(other_element));
      }
      this.commentList = __this__commentList;
    }
    this.more = other.more;
    if (other.isSetExtraKey()) {
      this.extraKey = other.extraKey;
    }
    this.entryId = other.entryId;
  }

  public FriendsCommentsResult deepCopy() {
    return new FriendsCommentsResult(this);
  }

  @Override
  public void clear() {
    this.commentList = null;
    setMoreIsSet(false);
    this.more = false;
    this.extraKey = null;
    setEntryIdIsSet(false);
    this.entryId = 0;
  }

  public int getCommentListSize() {
    return (this.commentList == null) ? 0 : this.commentList.size();
  }

  public java.util.Iterator<Comment> getCommentListIterator() {
    return (this.commentList == null) ? null : this.commentList.iterator();
  }

  public void addToCommentList(Comment elem) {
    if (this.commentList == null) {
      this.commentList = new ArrayList<Comment>();
    }
    this.commentList.add(elem);
  }

  /**
   * 获取的头部评论的列表
   */
  public List<Comment> getCommentList() {
    return this.commentList;
  }

  /**
   * 获取的头部评论的列表
   */
  public FriendsCommentsResult setCommentList(List<Comment> commentList) {
    this.commentList = commentList;
    return this;
  }

  public void unsetCommentList() {
    this.commentList = null;
  }

  /** Returns true if field commentList is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentList() {
    return this.commentList != null;
  }

  public void setCommentListIsSet(boolean value) {
    if (!value) {
      this.commentList = null;
    }
  }

  /**
   * 是否有更多的评论
   */
  public boolean isMore() {
    return this.more;
  }

  /**
   * 是否有更多的评论
   */
  public FriendsCommentsResult setMore(boolean more) {
    this.more = more;
    setMoreIsSet(true);
    return this;
  }

  public void unsetMore() {
    __isset_bit_vector.clear(__MORE_ISSET_ID);
  }

  /** Returns true if field more is set (has been assigned a value) and false otherwise */
  public boolean isSetMore() {
    return __isset_bit_vector.get(__MORE_ISSET_ID);
  }

  public void setMoreIsSet(boolean value) {
    __isset_bit_vector.set(__MORE_ISSET_ID, value);
  }

  /**
   * 辅助字段
   */
  public String getExtraKey() {
    return this.extraKey;
  }

  /**
   * 辅助字段
   */
  public FriendsCommentsResult setExtraKey(String extraKey) {
    this.extraKey = extraKey;
    return this;
  }

  public void unsetExtraKey() {
    this.extraKey = null;
  }

  /** Returns true if field extraKey is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraKey() {
    return this.extraKey != null;
  }

  public void setExtraKeyIsSet(boolean value) {
    if (!value) {
      this.extraKey = null;
    }
  }

  /**
   * 资源id
   */
  public long getEntryId() {
    return this.entryId;
  }

  /**
   * 资源id
   */
  public FriendsCommentsResult setEntryId(long entryId) {
    this.entryId = entryId;
    setEntryIdIsSet(true);
    return this;
  }

  public void unsetEntryId() {
    __isset_bit_vector.clear(__ENTRYID_ISSET_ID);
  }

  /** Returns true if field entryId is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryId() {
    return __isset_bit_vector.get(__ENTRYID_ISSET_ID);
  }

  public void setEntryIdIsSet(boolean value) {
    __isset_bit_vector.set(__ENTRYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMENT_LIST:
      if (value == null) {
        unsetCommentList();
      } else {
        setCommentList((List<Comment>)value);
      }
      break;

    case MORE:
      if (value == null) {
        unsetMore();
      } else {
        setMore((Boolean)value);
      }
      break;

    case EXTRA_KEY:
      if (value == null) {
        unsetExtraKey();
      } else {
        setExtraKey((String)value);
      }
      break;

    case ENTRY_ID:
      if (value == null) {
        unsetEntryId();
      } else {
        setEntryId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMENT_LIST:
      return getCommentList();

    case MORE:
      return Boolean.valueOf(isMore());

    case EXTRA_KEY:
      return getExtraKey();

    case ENTRY_ID:
      return Long.valueOf(getEntryId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMENT_LIST:
      return isSetCommentList();
    case MORE:
      return isSetMore();
    case EXTRA_KEY:
      return isSetExtraKey();
    case ENTRY_ID:
      return isSetEntryId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FriendsCommentsResult)
      return this.equals((FriendsCommentsResult)that);
    return false;
  }

  public boolean equals(FriendsCommentsResult that) {
    if (that == null)
      return false;

    boolean this_present_commentList = true && this.isSetCommentList();
    boolean that_present_commentList = true && that.isSetCommentList();
    if (this_present_commentList || that_present_commentList) {
      if (!(this_present_commentList && that_present_commentList))
        return false;
      if (!this.commentList.equals(that.commentList))
        return false;
    }

    boolean this_present_more = true && this.isSetMore();
    boolean that_present_more = true && that.isSetMore();
    if (this_present_more || that_present_more) {
      if (!(this_present_more && that_present_more))
        return false;
      if (this.more != that.more)
        return false;
    }

    boolean this_present_extraKey = true && this.isSetExtraKey();
    boolean that_present_extraKey = true && that.isSetExtraKey();
    if (this_present_extraKey || that_present_extraKey) {
      if (!(this_present_extraKey && that_present_extraKey))
        return false;
      if (!this.extraKey.equals(that.extraKey))
        return false;
    }

    boolean this_present_entryId = true && this.isSetEntryId();
    boolean that_present_entryId = true && that.isSetEntryId();
    if (this_present_entryId || that_present_entryId) {
      if (!(this_present_entryId && that_present_entryId))
        return false;
      if (this.entryId != that.entryId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_commentList = true && (isSetCommentList());
    builder.append(present_commentList);
    if (present_commentList)
      builder.append(commentList);

    boolean present_more = true && (isSetMore());
    builder.append(present_more);
    if (present_more)
      builder.append(more);

    boolean present_extraKey = true && (isSetExtraKey());
    builder.append(present_extraKey);
    if (present_extraKey)
      builder.append(extraKey);

    boolean present_entryId = true && (isSetEntryId());
    builder.append(present_entryId);
    if (present_entryId)
      builder.append(entryId);

    return builder.toHashCode();
  }

  public int compareTo(FriendsCommentsResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FriendsCommentsResult typedOther = (FriendsCommentsResult)other;

    lastComparison = Boolean.valueOf(isSetCommentList()).compareTo(typedOther.isSetCommentList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentList, typedOther.commentList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMore()).compareTo(typedOther.isSetMore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.more, typedOther.more);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraKey()).compareTo(typedOther.isSetExtraKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraKey, typedOther.extraKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryId()).compareTo(typedOther.isSetEntryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryId, typedOther.entryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FriendsCommentsResult(");
    boolean first = true;

    if (isSetCommentList()) {
      sb.append("commentList:");
      if (this.commentList == null) {
        sb.append("null");
      } else {
        sb.append(this.commentList);
      }
      first = false;
    }
    if (isSetMore()) {
      if (!first) sb.append(", ");
      sb.append("more:");
      sb.append(this.more);
      first = false;
    }
    if (isSetExtraKey()) {
      if (!first) sb.append(", ");
      sb.append("extraKey:");
      if (this.extraKey == null) {
        sb.append("null");
      } else {
        sb.append(this.extraKey);
      }
      first = false;
    }
    if (isSetEntryId()) {
      if (!first) sb.append(", ");
      sb.append("entryId:");
      sb.append(this.entryId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FriendsCommentsResultStandardSchemeFactory implements SchemeFactory {
    public FriendsCommentsResultStandardScheme getScheme() {
      return new FriendsCommentsResultStandardScheme();
    }
  }

  private static class FriendsCommentsResultStandardScheme extends StandardScheme<FriendsCommentsResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FriendsCommentsResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.commentList = new ArrayList<Comment>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  Comment _elem32; // required
                  _elem32 = new Comment();
                  _elem32.read(iprot);
                  struct.commentList.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setCommentListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MORE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.more = iprot.readBool();
              struct.setMoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTRA_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extraKey = iprot.readString();
              struct.setExtraKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entryId = iprot.readI64();
              struct.setEntryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FriendsCommentsResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commentList != null) {
        if (struct.isSetCommentList()) {
          oprot.writeFieldBegin(COMMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commentList.size()));
            for (Comment _iter33 : struct.commentList)
            {
              _iter33.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMore()) {
        oprot.writeFieldBegin(MORE_FIELD_DESC);
        oprot.writeBool(struct.more);
        oprot.writeFieldEnd();
      }
      if (struct.extraKey != null) {
        if (struct.isSetExtraKey()) {
          oprot.writeFieldBegin(EXTRA_KEY_FIELD_DESC);
          oprot.writeString(struct.extraKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEntryId()) {
        oprot.writeFieldBegin(ENTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.entryId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FriendsCommentsResultTupleSchemeFactory implements SchemeFactory {
    public FriendsCommentsResultTupleScheme getScheme() {
      return new FriendsCommentsResultTupleScheme();
    }
  }

  private static class FriendsCommentsResultTupleScheme extends TupleScheme<FriendsCommentsResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FriendsCommentsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommentList()) {
        optionals.set(0);
      }
      if (struct.isSetMore()) {
        optionals.set(1);
      }
      if (struct.isSetExtraKey()) {
        optionals.set(2);
      }
      if (struct.isSetEntryId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCommentList()) {
        {
          oprot.writeI32(struct.commentList.size());
          for (Comment _iter34 : struct.commentList)
          {
            _iter34.write(oprot);
          }
        }
      }
      if (struct.isSetMore()) {
        oprot.writeBool(struct.more);
      }
      if (struct.isSetExtraKey()) {
        oprot.writeString(struct.extraKey);
      }
      if (struct.isSetEntryId()) {
        oprot.writeI64(struct.entryId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FriendsCommentsResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.commentList = new ArrayList<Comment>(_list35.size);
          for (int _i36 = 0; _i36 < _list35.size; ++_i36)
          {
            Comment _elem37; // required
            _elem37 = new Comment();
            _elem37.read(iprot);
            struct.commentList.add(_elem37);
          }
        }
        struct.setCommentListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.more = iprot.readBool();
        struct.setMoreIsSet(true);
      }
      if (incoming.get(2)) {
        struct.extraKey = iprot.readString();
        struct.setExtraKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.entryId = iprot.readI64();
        struct.setEntryIdIsSet(true);
      }
    }
  }

}

