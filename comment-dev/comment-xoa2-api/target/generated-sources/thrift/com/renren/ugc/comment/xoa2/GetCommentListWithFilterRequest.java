/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.ugc.comment.xoa2;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GetCommentListWithFilterRequest implements org.apache.thrift.TBase<GetCommentListWithFilterRequest, GetCommentListWithFilterRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCommentListWithFilterRequest");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actorId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ENTRY_OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryOwnerId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authorId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField BORDER_COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("borderCommentId", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetCommentListWithFilterRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetCommentListWithFilterRequestTupleSchemeFactory());
  }

  /**
   * 评论业务类型
   * 
   * @see com.renren.ugc.comment.xoa2.CommentType
   */
  public com.renren.ugc.comment.xoa2.CommentType type; // required
  /**
   * 获取评论列表Id - 对于某些业务是可选的，但是
   * 对于某些业务（比如UGC Blog）是必须的，用于
   * 来校验权限
   */
  public int actorId; // required
  /**
   * 被评论实体Id
   */
  public long entryId; // required
  /**
   * 被评论实体所有者Id
   */
  public int entryOwnerId; // required
  /**
   * 搜索开始的位置
   */
  public int offset; // optional
  /**
   * 返回结果的最大个数
   */
  public int limit; // optional
  /**
   * 当前的分页数, 从1开始计数
   */
  public int pageNum; // optional
  /**
   * 返回结果排序，true为从最新到旧返回结果
   */
  public boolean desc; // optional
  /**
   * 额外的参数，用于传入业务相关的参数
   */
  public Map<String,String> params; // optional
  /**
   * 需要过滤的作者id
   */
  public int authorId; // optional
  /**
   * 查询的commentId边界，通过设置此边界可以避免多次获取列表操作可能出现重复值的情况
   * 建议采用此值来进行分页。
   */
  public long borderCommentId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 评论业务类型
     * 
     * @see com.renren.ugc.comment.xoa2.CommentType
     */
    TYPE((short)1, "type"),
    /**
     * 获取评论列表Id - 对于某些业务是可选的，但是
     * 对于某些业务（比如UGC Blog）是必须的，用于
     * 来校验权限
     */
    ACTOR_ID((short)2, "actorId"),
    /**
     * 被评论实体Id
     */
    ENTRY_ID((short)3, "entryId"),
    /**
     * 被评论实体所有者Id
     */
    ENTRY_OWNER_ID((short)4, "entryOwnerId"),
    /**
     * 搜索开始的位置
     */
    OFFSET((short)5, "offset"),
    /**
     * 返回结果的最大个数
     */
    LIMIT((short)6, "limit"),
    /**
     * 当前的分页数, 从1开始计数
     */
    PAGE_NUM((short)7, "pageNum"),
    /**
     * 返回结果排序，true为从最新到旧返回结果
     */
    DESC((short)8, "desc"),
    /**
     * 额外的参数，用于传入业务相关的参数
     */
    PARAMS((short)9, "params"),
    /**
     * 需要过滤的作者id
     */
    AUTHOR_ID((short)10, "authorId"),
    /**
     * 查询的commentId边界，通过设置此边界可以避免多次获取列表操作可能出现重复值的情况
     * 建议采用此值来进行分页。
     */
    BORDER_COMMENT_ID((short)11, "borderCommentId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // ACTOR_ID
          return ACTOR_ID;
        case 3: // ENTRY_ID
          return ENTRY_ID;
        case 4: // ENTRY_OWNER_ID
          return ENTRY_OWNER_ID;
        case 5: // OFFSET
          return OFFSET;
        case 6: // LIMIT
          return LIMIT;
        case 7: // PAGE_NUM
          return PAGE_NUM;
        case 8: // DESC
          return DESC;
        case 9: // PARAMS
          return PARAMS;
        case 10: // AUTHOR_ID
          return AUTHOR_ID;
        case 11: // BORDER_COMMENT_ID
          return BORDER_COMMENT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTORID_ISSET_ID = 0;
  private static final int __ENTRYID_ISSET_ID = 1;
  private static final int __ENTRYOWNERID_ISSET_ID = 2;
  private static final int __OFFSET_ISSET_ID = 3;
  private static final int __LIMIT_ISSET_ID = 4;
  private static final int __PAGENUM_ISSET_ID = 5;
  private static final int __DESC_ISSET_ID = 6;
  private static final int __AUTHORID_ISSET_ID = 7;
  private static final int __BORDERCOMMENTID_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);
  private _Fields optionals[] = {_Fields.OFFSET,_Fields.LIMIT,_Fields.PAGE_NUM,_Fields.DESC,_Fields.PARAMS,_Fields.AUTHOR_ID,_Fields.BORDER_COMMENT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.renren.ugc.comment.xoa2.CommentType.class)));
    tmpMap.put(_Fields.ACTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("actorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("entryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENTRY_OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("entryOwnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("authorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BORDER_COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("borderCommentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCommentListWithFilterRequest.class, metaDataMap);
  }

  public GetCommentListWithFilterRequest() {
  }

  public GetCommentListWithFilterRequest(
    com.renren.ugc.comment.xoa2.CommentType type,
    int actorId,
    long entryId,
    int entryOwnerId)
  {
    this();
    this.type = type;
    this.actorId = actorId;
    setActorIdIsSet(true);
    this.entryId = entryId;
    setEntryIdIsSet(true);
    this.entryOwnerId = entryOwnerId;
    setEntryOwnerIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetCommentListWithFilterRequest(GetCommentListWithFilterRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.actorId = other.actorId;
    this.entryId = other.entryId;
    this.entryOwnerId = other.entryOwnerId;
    this.offset = other.offset;
    this.limit = other.limit;
    this.pageNum = other.pageNum;
    this.desc = other.desc;
    if (other.isSetParams()) {
      Map<String,String> __this__params = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.params.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__params_copy_key = other_element_key;

        String __this__params_copy_value = other_element_value;

        __this__params.put(__this__params_copy_key, __this__params_copy_value);
      }
      this.params = __this__params;
    }
    this.authorId = other.authorId;
    this.borderCommentId = other.borderCommentId;
  }

  public GetCommentListWithFilterRequest deepCopy() {
    return new GetCommentListWithFilterRequest(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setActorIdIsSet(false);
    this.actorId = 0;
    setEntryIdIsSet(false);
    this.entryId = 0;
    setEntryOwnerIdIsSet(false);
    this.entryOwnerId = 0;
    setOffsetIsSet(false);
    this.offset = 0;
    setLimitIsSet(false);
    this.limit = 0;
    setPageNumIsSet(false);
    this.pageNum = 0;
    setDescIsSet(false);
    this.desc = false;
    this.params = null;
    setAuthorIdIsSet(false);
    this.authorId = 0;
    setBorderCommentIdIsSet(false);
    this.borderCommentId = 0;
  }

  /**
   * 评论业务类型
   * 
   * @see com.renren.ugc.comment.xoa2.CommentType
   */
  public com.renren.ugc.comment.xoa2.CommentType getType() {
    return this.type;
  }

  /**
   * 评论业务类型
   * 
   * @see com.renren.ugc.comment.xoa2.CommentType
   */
  public GetCommentListWithFilterRequest setType(com.renren.ugc.comment.xoa2.CommentType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 获取评论列表Id - 对于某些业务是可选的，但是
   * 对于某些业务（比如UGC Blog）是必须的，用于
   * 来校验权限
   */
  public int getActorId() {
    return this.actorId;
  }

  /**
   * 获取评论列表Id - 对于某些业务是可选的，但是
   * 对于某些业务（比如UGC Blog）是必须的，用于
   * 来校验权限
   */
  public GetCommentListWithFilterRequest setActorId(int actorId) {
    this.actorId = actorId;
    setActorIdIsSet(true);
    return this;
  }

  public void unsetActorId() {
    __isset_bit_vector.clear(__ACTORID_ISSET_ID);
  }

  /** Returns true if field actorId is set (has been assigned a value) and false otherwise */
  public boolean isSetActorId() {
    return __isset_bit_vector.get(__ACTORID_ISSET_ID);
  }

  public void setActorIdIsSet(boolean value) {
    __isset_bit_vector.set(__ACTORID_ISSET_ID, value);
  }

  /**
   * 被评论实体Id
   */
  public long getEntryId() {
    return this.entryId;
  }

  /**
   * 被评论实体Id
   */
  public GetCommentListWithFilterRequest setEntryId(long entryId) {
    this.entryId = entryId;
    setEntryIdIsSet(true);
    return this;
  }

  public void unsetEntryId() {
    __isset_bit_vector.clear(__ENTRYID_ISSET_ID);
  }

  /** Returns true if field entryId is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryId() {
    return __isset_bit_vector.get(__ENTRYID_ISSET_ID);
  }

  public void setEntryIdIsSet(boolean value) {
    __isset_bit_vector.set(__ENTRYID_ISSET_ID, value);
  }

  /**
   * 被评论实体所有者Id
   */
  public int getEntryOwnerId() {
    return this.entryOwnerId;
  }

  /**
   * 被评论实体所有者Id
   */
  public GetCommentListWithFilterRequest setEntryOwnerId(int entryOwnerId) {
    this.entryOwnerId = entryOwnerId;
    setEntryOwnerIdIsSet(true);
    return this;
  }

  public void unsetEntryOwnerId() {
    __isset_bit_vector.clear(__ENTRYOWNERID_ISSET_ID);
  }

  /** Returns true if field entryOwnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryOwnerId() {
    return __isset_bit_vector.get(__ENTRYOWNERID_ISSET_ID);
  }

  public void setEntryOwnerIdIsSet(boolean value) {
    __isset_bit_vector.set(__ENTRYOWNERID_ISSET_ID, value);
  }

  /**
   * 搜索开始的位置
   */
  public int getOffset() {
    return this.offset;
  }

  /**
   * 搜索开始的位置
   */
  public GetCommentListWithFilterRequest setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bit_vector.clear(__OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return __isset_bit_vector.get(__OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bit_vector.set(__OFFSET_ISSET_ID, value);
  }

  /**
   * 返回结果的最大个数
   */
  public int getLimit() {
    return this.limit;
  }

  /**
   * 返回结果的最大个数
   */
  public GetCommentListWithFilterRequest setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bit_vector.clear(__LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return __isset_bit_vector.get(__LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bit_vector.set(__LIMIT_ISSET_ID, value);
  }

  /**
   * 当前的分页数, 从1开始计数
   */
  public int getPageNum() {
    return this.pageNum;
  }

  /**
   * 当前的分页数, 从1开始计数
   */
  public GetCommentListWithFilterRequest setPageNum(int pageNum) {
    this.pageNum = pageNum;
    setPageNumIsSet(true);
    return this;
  }

  public void unsetPageNum() {
    __isset_bit_vector.clear(__PAGENUM_ISSET_ID);
  }

  /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPageNum() {
    return __isset_bit_vector.get(__PAGENUM_ISSET_ID);
  }

  public void setPageNumIsSet(boolean value) {
    __isset_bit_vector.set(__PAGENUM_ISSET_ID, value);
  }

  /**
   * 返回结果排序，true为从最新到旧返回结果
   */
  public boolean isDesc() {
    return this.desc;
  }

  /**
   * 返回结果排序，true为从最新到旧返回结果
   */
  public GetCommentListWithFilterRequest setDesc(boolean desc) {
    this.desc = desc;
    setDescIsSet(true);
    return this;
  }

  public void unsetDesc() {
    __isset_bit_vector.clear(__DESC_ISSET_ID);
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return __isset_bit_vector.get(__DESC_ISSET_ID);
  }

  public void setDescIsSet(boolean value) {
    __isset_bit_vector.set(__DESC_ISSET_ID, value);
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(String key, String val) {
    if (this.params == null) {
      this.params = new HashMap<String,String>();
    }
    this.params.put(key, val);
  }

  /**
   * 额外的参数，用于传入业务相关的参数
   */
  public Map<String,String> getParams() {
    return this.params;
  }

  /**
   * 额外的参数，用于传入业务相关的参数
   */
  public GetCommentListWithFilterRequest setParams(Map<String,String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  /**
   * 需要过滤的作者id
   */
  public int getAuthorId() {
    return this.authorId;
  }

  /**
   * 需要过滤的作者id
   */
  public GetCommentListWithFilterRequest setAuthorId(int authorId) {
    this.authorId = authorId;
    setAuthorIdIsSet(true);
    return this;
  }

  public void unsetAuthorId() {
    __isset_bit_vector.clear(__AUTHORID_ISSET_ID);
  }

  /** Returns true if field authorId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorId() {
    return __isset_bit_vector.get(__AUTHORID_ISSET_ID);
  }

  public void setAuthorIdIsSet(boolean value) {
    __isset_bit_vector.set(__AUTHORID_ISSET_ID, value);
  }

  /**
   * 查询的commentId边界，通过设置此边界可以避免多次获取列表操作可能出现重复值的情况
   * 建议采用此值来进行分页。
   */
  public long getBorderCommentId() {
    return this.borderCommentId;
  }

  /**
   * 查询的commentId边界，通过设置此边界可以避免多次获取列表操作可能出现重复值的情况
   * 建议采用此值来进行分页。
   */
  public GetCommentListWithFilterRequest setBorderCommentId(long borderCommentId) {
    this.borderCommentId = borderCommentId;
    setBorderCommentIdIsSet(true);
    return this;
  }

  public void unsetBorderCommentId() {
    __isset_bit_vector.clear(__BORDERCOMMENTID_ISSET_ID);
  }

  /** Returns true if field borderCommentId is set (has been assigned a value) and false otherwise */
  public boolean isSetBorderCommentId() {
    return __isset_bit_vector.get(__BORDERCOMMENTID_ISSET_ID);
  }

  public void setBorderCommentIdIsSet(boolean value) {
    __isset_bit_vector.set(__BORDERCOMMENTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((com.renren.ugc.comment.xoa2.CommentType)value);
      }
      break;

    case ACTOR_ID:
      if (value == null) {
        unsetActorId();
      } else {
        setActorId((Integer)value);
      }
      break;

    case ENTRY_ID:
      if (value == null) {
        unsetEntryId();
      } else {
        setEntryId((Long)value);
      }
      break;

    case ENTRY_OWNER_ID:
      if (value == null) {
        unsetEntryOwnerId();
      } else {
        setEntryOwnerId((Integer)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    case PAGE_NUM:
      if (value == null) {
        unsetPageNum();
      } else {
        setPageNum((Integer)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((Boolean)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((Map<String,String>)value);
      }
      break;

    case AUTHOR_ID:
      if (value == null) {
        unsetAuthorId();
      } else {
        setAuthorId((Integer)value);
      }
      break;

    case BORDER_COMMENT_ID:
      if (value == null) {
        unsetBorderCommentId();
      } else {
        setBorderCommentId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case ACTOR_ID:
      return Integer.valueOf(getActorId());

    case ENTRY_ID:
      return Long.valueOf(getEntryId());

    case ENTRY_OWNER_ID:
      return Integer.valueOf(getEntryOwnerId());

    case OFFSET:
      return Integer.valueOf(getOffset());

    case LIMIT:
      return Integer.valueOf(getLimit());

    case PAGE_NUM:
      return Integer.valueOf(getPageNum());

    case DESC:
      return Boolean.valueOf(isDesc());

    case PARAMS:
      return getParams();

    case AUTHOR_ID:
      return Integer.valueOf(getAuthorId());

    case BORDER_COMMENT_ID:
      return Long.valueOf(getBorderCommentId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case ACTOR_ID:
      return isSetActorId();
    case ENTRY_ID:
      return isSetEntryId();
    case ENTRY_OWNER_ID:
      return isSetEntryOwnerId();
    case OFFSET:
      return isSetOffset();
    case LIMIT:
      return isSetLimit();
    case PAGE_NUM:
      return isSetPageNum();
    case DESC:
      return isSetDesc();
    case PARAMS:
      return isSetParams();
    case AUTHOR_ID:
      return isSetAuthorId();
    case BORDER_COMMENT_ID:
      return isSetBorderCommentId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetCommentListWithFilterRequest)
      return this.equals((GetCommentListWithFilterRequest)that);
    return false;
  }

  public boolean equals(GetCommentListWithFilterRequest that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_actorId = true;
    boolean that_present_actorId = true;
    if (this_present_actorId || that_present_actorId) {
      if (!(this_present_actorId && that_present_actorId))
        return false;
      if (this.actorId != that.actorId)
        return false;
    }

    boolean this_present_entryId = true;
    boolean that_present_entryId = true;
    if (this_present_entryId || that_present_entryId) {
      if (!(this_present_entryId && that_present_entryId))
        return false;
      if (this.entryId != that.entryId)
        return false;
    }

    boolean this_present_entryOwnerId = true;
    boolean that_present_entryOwnerId = true;
    if (this_present_entryOwnerId || that_present_entryOwnerId) {
      if (!(this_present_entryOwnerId && that_present_entryOwnerId))
        return false;
      if (this.entryOwnerId != that.entryOwnerId)
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_pageNum = true && this.isSetPageNum();
    boolean that_present_pageNum = true && that.isSetPageNum();
    if (this_present_pageNum || that_present_pageNum) {
      if (!(this_present_pageNum && that_present_pageNum))
        return false;
      if (this.pageNum != that.pageNum)
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (this.desc != that.desc)
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_authorId = true && this.isSetAuthorId();
    boolean that_present_authorId = true && that.isSetAuthorId();
    if (this_present_authorId || that_present_authorId) {
      if (!(this_present_authorId && that_present_authorId))
        return false;
      if (this.authorId != that.authorId)
        return false;
    }

    boolean this_present_borderCommentId = true && this.isSetBorderCommentId();
    boolean that_present_borderCommentId = true && that.isSetBorderCommentId();
    if (this_present_borderCommentId || that_present_borderCommentId) {
      if (!(this_present_borderCommentId && that_present_borderCommentId))
        return false;
      if (this.borderCommentId != that.borderCommentId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type.getValue());

    boolean present_actorId = true;
    builder.append(present_actorId);
    if (present_actorId)
      builder.append(actorId);

    boolean present_entryId = true;
    builder.append(present_entryId);
    if (present_entryId)
      builder.append(entryId);

    boolean present_entryOwnerId = true;
    builder.append(present_entryOwnerId);
    if (present_entryOwnerId)
      builder.append(entryOwnerId);

    boolean present_offset = true && (isSetOffset());
    builder.append(present_offset);
    if (present_offset)
      builder.append(offset);

    boolean present_limit = true && (isSetLimit());
    builder.append(present_limit);
    if (present_limit)
      builder.append(limit);

    boolean present_pageNum = true && (isSetPageNum());
    builder.append(present_pageNum);
    if (present_pageNum)
      builder.append(pageNum);

    boolean present_desc = true && (isSetDesc());
    builder.append(present_desc);
    if (present_desc)
      builder.append(desc);

    boolean present_params = true && (isSetParams());
    builder.append(present_params);
    if (present_params)
      builder.append(params);

    boolean present_authorId = true && (isSetAuthorId());
    builder.append(present_authorId);
    if (present_authorId)
      builder.append(authorId);

    boolean present_borderCommentId = true && (isSetBorderCommentId());
    builder.append(present_borderCommentId);
    if (present_borderCommentId)
      builder.append(borderCommentId);

    return builder.toHashCode();
  }

  public int compareTo(GetCommentListWithFilterRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GetCommentListWithFilterRequest typedOther = (GetCommentListWithFilterRequest)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActorId()).compareTo(typedOther.isSetActorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actorId, typedOther.actorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryId()).compareTo(typedOther.isSetEntryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryId, typedOther.entryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryOwnerId()).compareTo(typedOther.isSetEntryOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryOwnerId, typedOther.entryOwnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(typedOther.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, typedOther.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(typedOther.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, typedOther.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(typedOther.isSetPageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, typedOther.pageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorId()).compareTo(typedOther.isSetAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorId, typedOther.authorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBorderCommentId()).compareTo(typedOther.isSetBorderCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBorderCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.borderCommentId, typedOther.borderCommentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetCommentListWithFilterRequest(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actorId:");
    sb.append(this.actorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryId:");
    sb.append(this.entryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryOwnerId:");
    sb.append(this.entryOwnerId);
    first = false;
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetLimit()) {
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    if (isSetPageNum()) {
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      sb.append(this.desc);
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetAuthorId()) {
      if (!first) sb.append(", ");
      sb.append("authorId:");
      sb.append(this.authorId);
      first = false;
    }
    if (isSetBorderCommentId()) {
      if (!first) sb.append(", ");
      sb.append("borderCommentId:");
      sb.append(this.borderCommentId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetCommentListWithFilterRequestStandardSchemeFactory implements SchemeFactory {
    public GetCommentListWithFilterRequestStandardScheme getScheme() {
      return new GetCommentListWithFilterRequestStandardScheme();
    }
  }

  private static class GetCommentListWithFilterRequestStandardScheme extends StandardScheme<GetCommentListWithFilterRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetCommentListWithFilterRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.renren.ugc.comment.xoa2.CommentType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actorId = iprot.readI32();
              struct.setActorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.entryId = iprot.readI64();
              struct.setEntryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTRY_OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.entryOwnerId = iprot.readI32();
              struct.setEntryOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageNum = iprot.readI32();
              struct.setPageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.desc = iprot.readBool();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map380 = iprot.readMapBegin();
                struct.params = new HashMap<String,String>(2*_map380.size);
                for (int _i381 = 0; _i381 < _map380.size; ++_i381)
                {
                  String _key382; // required
                  String _val383; // required
                  _key382 = iprot.readString();
                  _val383 = iprot.readString();
                  struct.params.put(_key382, _val383);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authorId = iprot.readI32();
              struct.setAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BORDER_COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.borderCommentId = iprot.readI64();
              struct.setBorderCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetCommentListWithFilterRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTOR_ID_FIELD_DESC);
      oprot.writeI32(struct.actorId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTRY_ID_FIELD_DESC);
      oprot.writeI64(struct.entryId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENTRY_OWNER_ID_FIELD_DESC);
      oprot.writeI32(struct.entryOwnerId);
      oprot.writeFieldEnd();
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimit()) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPageNum()) {
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDesc()) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeBool(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter384 : struct.params.entrySet())
            {
              oprot.writeString(_iter384.getKey());
              oprot.writeString(_iter384.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuthorId()) {
        oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
        oprot.writeI32(struct.authorId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBorderCommentId()) {
        oprot.writeFieldBegin(BORDER_COMMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.borderCommentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetCommentListWithFilterRequestTupleSchemeFactory implements SchemeFactory {
    public GetCommentListWithFilterRequestTupleScheme getScheme() {
      return new GetCommentListWithFilterRequestTupleScheme();
    }
  }

  private static class GetCommentListWithFilterRequestTupleScheme extends TupleScheme<GetCommentListWithFilterRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetCommentListWithFilterRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetActorId()) {
        optionals.set(1);
      }
      if (struct.isSetEntryId()) {
        optionals.set(2);
      }
      if (struct.isSetEntryOwnerId()) {
        optionals.set(3);
      }
      if (struct.isSetOffset()) {
        optionals.set(4);
      }
      if (struct.isSetLimit()) {
        optionals.set(5);
      }
      if (struct.isSetPageNum()) {
        optionals.set(6);
      }
      if (struct.isSetDesc()) {
        optionals.set(7);
      }
      if (struct.isSetParams()) {
        optionals.set(8);
      }
      if (struct.isSetAuthorId()) {
        optionals.set(9);
      }
      if (struct.isSetBorderCommentId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetActorId()) {
        oprot.writeI32(struct.actorId);
      }
      if (struct.isSetEntryId()) {
        oprot.writeI64(struct.entryId);
      }
      if (struct.isSetEntryOwnerId()) {
        oprot.writeI32(struct.entryOwnerId);
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetPageNum()) {
        oprot.writeI32(struct.pageNum);
      }
      if (struct.isSetDesc()) {
        oprot.writeBool(struct.desc);
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (Map.Entry<String, String> _iter385 : struct.params.entrySet())
          {
            oprot.writeString(_iter385.getKey());
            oprot.writeString(_iter385.getValue());
          }
        }
      }
      if (struct.isSetAuthorId()) {
        oprot.writeI32(struct.authorId);
      }
      if (struct.isSetBorderCommentId()) {
        oprot.writeI64(struct.borderCommentId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetCommentListWithFilterRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.type = com.renren.ugc.comment.xoa2.CommentType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.actorId = iprot.readI32();
        struct.setActorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.entryId = iprot.readI64();
        struct.setEntryIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.entryOwnerId = iprot.readI32();
        struct.setEntryOwnerIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(5)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pageNum = iprot.readI32();
        struct.setPageNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.desc = iprot.readBool();
        struct.setDescIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map386 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new HashMap<String,String>(2*_map386.size);
          for (int _i387 = 0; _i387 < _map386.size; ++_i387)
          {
            String _key388; // required
            String _val389; // required
            _key388 = iprot.readString();
            _val389 = iprot.readString();
            struct.params.put(_key388, _val389);
          }
        }
        struct.setParamsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.authorId = iprot.readI32();
        struct.setAuthorIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.borderCommentId = iprot.readI64();
        struct.setBorderCommentIdIsSet(true);
      }
    }
  }

}

