/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.ugc.comment.xoa2;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GetCommentsForFeedCountRequest implements org.apache.thrift.TBase<GetCommentsForFeedCountRequest, GetCommentsForFeedCountRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetCommentsForFeedCountRequest");

  private static final org.apache.thrift.protocol.TField INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("infos", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ACTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actorId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetCommentsForFeedCountRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetCommentsForFeedCountRequestTupleSchemeFactory());
  }

  /**
   * 批量取首尾评论的参数
   */
  public List<FeedCommentInfo> infos; // required
  /**
   * 获取评论列表Id - 对于某些业务是可选的，但是
   * 对于某些业务（比如UGC Blog）是必须的，用于
   * 来校验权限
   */
  public int actorId; // optional
  public Map<String,String> params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 批量取首尾评论的参数
     */
    INFOS((short)1, "infos"),
    /**
     * 获取评论列表Id - 对于某些业务是可选的，但是
     * 对于某些业务（比如UGC Blog）是必须的，用于
     * 来校验权限
     */
    ACTOR_ID((short)2, "actorId"),
    PARAMS((short)3, "params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INFOS
          return INFOS;
        case 2: // ACTOR_ID
          return ACTOR_ID;
        case 3: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTORID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.ACTOR_ID,_Fields.PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INFOS, new org.apache.thrift.meta_data.FieldMetaData("infos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FeedCommentInfo.class))));
    tmpMap.put(_Fields.ACTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("actorId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCommentsForFeedCountRequest.class, metaDataMap);
  }

  public GetCommentsForFeedCountRequest() {
  }

  public GetCommentsForFeedCountRequest(
    List<FeedCommentInfo> infos)
  {
    this();
    this.infos = infos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetCommentsForFeedCountRequest(GetCommentsForFeedCountRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetInfos()) {
      List<FeedCommentInfo> __this__infos = new ArrayList<FeedCommentInfo>();
      for (FeedCommentInfo other_element : other.infos) {
        __this__infos.add(new FeedCommentInfo(other_element));
      }
      this.infos = __this__infos;
    }
    this.actorId = other.actorId;
    if (other.isSetParams()) {
      Map<String,String> __this__params = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.params.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__params_copy_key = other_element_key;

        String __this__params_copy_value = other_element_value;

        __this__params.put(__this__params_copy_key, __this__params_copy_value);
      }
      this.params = __this__params;
    }
  }

  public GetCommentsForFeedCountRequest deepCopy() {
    return new GetCommentsForFeedCountRequest(this);
  }

  @Override
  public void clear() {
    this.infos = null;
    setActorIdIsSet(false);
    this.actorId = 0;
    this.params = null;
  }

  public int getInfosSize() {
    return (this.infos == null) ? 0 : this.infos.size();
  }

  public java.util.Iterator<FeedCommentInfo> getInfosIterator() {
    return (this.infos == null) ? null : this.infos.iterator();
  }

  public void addToInfos(FeedCommentInfo elem) {
    if (this.infos == null) {
      this.infos = new ArrayList<FeedCommentInfo>();
    }
    this.infos.add(elem);
  }

  /**
   * 批量取首尾评论的参数
   */
  public List<FeedCommentInfo> getInfos() {
    return this.infos;
  }

  /**
   * 批量取首尾评论的参数
   */
  public GetCommentsForFeedCountRequest setInfos(List<FeedCommentInfo> infos) {
    this.infos = infos;
    return this;
  }

  public void unsetInfos() {
    this.infos = null;
  }

  /** Returns true if field infos is set (has been assigned a value) and false otherwise */
  public boolean isSetInfos() {
    return this.infos != null;
  }

  public void setInfosIsSet(boolean value) {
    if (!value) {
      this.infos = null;
    }
  }

  /**
   * 获取评论列表Id - 对于某些业务是可选的，但是
   * 对于某些业务（比如UGC Blog）是必须的，用于
   * 来校验权限
   */
  public int getActorId() {
    return this.actorId;
  }

  /**
   * 获取评论列表Id - 对于某些业务是可选的，但是
   * 对于某些业务（比如UGC Blog）是必须的，用于
   * 来校验权限
   */
  public GetCommentsForFeedCountRequest setActorId(int actorId) {
    this.actorId = actorId;
    setActorIdIsSet(true);
    return this;
  }

  public void unsetActorId() {
    __isset_bit_vector.clear(__ACTORID_ISSET_ID);
  }

  /** Returns true if field actorId is set (has been assigned a value) and false otherwise */
  public boolean isSetActorId() {
    return __isset_bit_vector.get(__ACTORID_ISSET_ID);
  }

  public void setActorIdIsSet(boolean value) {
    __isset_bit_vector.set(__ACTORID_ISSET_ID, value);
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(String key, String val) {
    if (this.params == null) {
      this.params = new HashMap<String,String>();
    }
    this.params.put(key, val);
  }

  public Map<String,String> getParams() {
    return this.params;
  }

  public GetCommentsForFeedCountRequest setParams(Map<String,String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INFOS:
      if (value == null) {
        unsetInfos();
      } else {
        setInfos((List<FeedCommentInfo>)value);
      }
      break;

    case ACTOR_ID:
      if (value == null) {
        unsetActorId();
      } else {
        setActorId((Integer)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INFOS:
      return getInfos();

    case ACTOR_ID:
      return Integer.valueOf(getActorId());

    case PARAMS:
      return getParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INFOS:
      return isSetInfos();
    case ACTOR_ID:
      return isSetActorId();
    case PARAMS:
      return isSetParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetCommentsForFeedCountRequest)
      return this.equals((GetCommentsForFeedCountRequest)that);
    return false;
  }

  public boolean equals(GetCommentsForFeedCountRequest that) {
    if (that == null)
      return false;

    boolean this_present_infos = true && this.isSetInfos();
    boolean that_present_infos = true && that.isSetInfos();
    if (this_present_infos || that_present_infos) {
      if (!(this_present_infos && that_present_infos))
        return false;
      if (!this.infos.equals(that.infos))
        return false;
    }

    boolean this_present_actorId = true && this.isSetActorId();
    boolean that_present_actorId = true && that.isSetActorId();
    if (this_present_actorId || that_present_actorId) {
      if (!(this_present_actorId && that_present_actorId))
        return false;
      if (this.actorId != that.actorId)
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_infos = true && (isSetInfos());
    builder.append(present_infos);
    if (present_infos)
      builder.append(infos);

    boolean present_actorId = true && (isSetActorId());
    builder.append(present_actorId);
    if (present_actorId)
      builder.append(actorId);

    boolean present_params = true && (isSetParams());
    builder.append(present_params);
    if (present_params)
      builder.append(params);

    return builder.toHashCode();
  }

  public int compareTo(GetCommentsForFeedCountRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GetCommentsForFeedCountRequest typedOther = (GetCommentsForFeedCountRequest)other;

    lastComparison = Boolean.valueOf(isSetInfos()).compareTo(typedOther.isSetInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.infos, typedOther.infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActorId()).compareTo(typedOther.isSetActorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actorId, typedOther.actorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetCommentsForFeedCountRequest(");
    boolean first = true;

    sb.append("infos:");
    if (this.infos == null) {
      sb.append("null");
    } else {
      sb.append(this.infos);
    }
    first = false;
    if (isSetActorId()) {
      if (!first) sb.append(", ");
      sb.append("actorId:");
      sb.append(this.actorId);
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetCommentsForFeedCountRequestStandardSchemeFactory implements SchemeFactory {
    public GetCommentsForFeedCountRequestStandardScheme getScheme() {
      return new GetCommentsForFeedCountRequestStandardScheme();
    }
  }

  private static class GetCommentsForFeedCountRequestStandardScheme extends StandardScheme<GetCommentsForFeedCountRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetCommentsForFeedCountRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list324 = iprot.readListBegin();
                struct.infos = new ArrayList<FeedCommentInfo>(_list324.size);
                for (int _i325 = 0; _i325 < _list324.size; ++_i325)
                {
                  FeedCommentInfo _elem326; // required
                  _elem326 = new FeedCommentInfo();
                  _elem326.read(iprot);
                  struct.infos.add(_elem326);
                }
                iprot.readListEnd();
              }
              struct.setInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actorId = iprot.readI32();
              struct.setActorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map327 = iprot.readMapBegin();
                struct.params = new HashMap<String,String>(2*_map327.size);
                for (int _i328 = 0; _i328 < _map327.size; ++_i328)
                {
                  String _key329; // required
                  String _val330; // required
                  _key329 = iprot.readString();
                  _val330 = iprot.readString();
                  struct.params.put(_key329, _val330);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetCommentsForFeedCountRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.infos != null) {
        oprot.writeFieldBegin(INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.infos.size()));
          for (FeedCommentInfo _iter331 : struct.infos)
          {
            _iter331.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetActorId()) {
        oprot.writeFieldBegin(ACTOR_ID_FIELD_DESC);
        oprot.writeI32(struct.actorId);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter332 : struct.params.entrySet())
            {
              oprot.writeString(_iter332.getKey());
              oprot.writeString(_iter332.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetCommentsForFeedCountRequestTupleSchemeFactory implements SchemeFactory {
    public GetCommentsForFeedCountRequestTupleScheme getScheme() {
      return new GetCommentsForFeedCountRequestTupleScheme();
    }
  }

  private static class GetCommentsForFeedCountRequestTupleScheme extends TupleScheme<GetCommentsForFeedCountRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetCommentsForFeedCountRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInfos()) {
        optionals.set(0);
      }
      if (struct.isSetActorId()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInfos()) {
        {
          oprot.writeI32(struct.infos.size());
          for (FeedCommentInfo _iter333 : struct.infos)
          {
            _iter333.write(oprot);
          }
        }
      }
      if (struct.isSetActorId()) {
        oprot.writeI32(struct.actorId);
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (Map.Entry<String, String> _iter334 : struct.params.entrySet())
          {
            oprot.writeString(_iter334.getKey());
            oprot.writeString(_iter334.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetCommentsForFeedCountRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list335 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.infos = new ArrayList<FeedCommentInfo>(_list335.size);
          for (int _i336 = 0; _i336 < _list335.size; ++_i336)
          {
            FeedCommentInfo _elem337; // required
            _elem337 = new FeedCommentInfo();
            _elem337.read(iprot);
            struct.infos.add(_elem337);
          }
        }
        struct.setInfosIsSet(true);
      }
      if (incoming.get(1)) {
        struct.actorId = iprot.readI32();
        struct.setActorIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map338 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new HashMap<String,String>(2*_map338.size);
          for (int _i339 = 0; _i339 < _map338.size; ++_i339)
          {
            String _key340; // required
            String _val341; // required
            _key340 = iprot.readString();
            _val341 = iprot.readString();
            struct.params.put(_key340, _val341);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

}

