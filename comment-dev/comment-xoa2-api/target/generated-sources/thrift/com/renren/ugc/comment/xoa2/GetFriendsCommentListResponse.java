/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.ugc.comment.xoa2;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GetFriendsCommentListResponse implements org.apache.thrift.TBase<GetFriendsCommentListResponse, GetFriendsCommentListResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetFriendsCommentListResponse");

  private static final org.apache.thrift.protocol.TField COMMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("commentList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_REP_FIELD_DESC = new org.apache.thrift.protocol.TField("baseRep", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MORE_FIELD_DESC = new org.apache.thrift.protocol.TField("more", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField ENTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("entry", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetFriendsCommentListResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetFriendsCommentListResponseTupleSchemeFactory());
  }

  /**
   * 获取的评论的列表
   */
  public List<com.renren.ugc.comment.xoa2.Comment> commentList; // optional
  /**
   * 响应信息
   */
  public com.renren.xoa2.BaseResponse baseRep; // optional
  /**
   * 是否有更多的评论
   */
  public boolean more; // optional
  /**
   * 被评论的“实体”
   */
  public com.renren.ugc.comment.xoa2.Entry entry; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 获取的评论的列表
     */
    COMMENT_LIST((short)1, "commentList"),
    /**
     * 响应信息
     */
    BASE_REP((short)2, "baseRep"),
    /**
     * 是否有更多的评论
     */
    MORE((short)3, "more"),
    /**
     * 被评论的“实体”
     */
    ENTRY((short)4, "entry");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMENT_LIST
          return COMMENT_LIST;
        case 2: // BASE_REP
          return BASE_REP;
        case 3: // MORE
          return MORE;
        case 4: // ENTRY
          return ENTRY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MORE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.COMMENT_LIST,_Fields.BASE_REP,_Fields.MORE,_Fields.ENTRY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("commentList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.renren.ugc.comment.xoa2.Comment.class))));
    tmpMap.put(_Fields.BASE_REP, new org.apache.thrift.meta_data.FieldMetaData("baseRep", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.renren.xoa2.BaseResponse.class)));
    tmpMap.put(_Fields.MORE, new org.apache.thrift.meta_data.FieldMetaData("more", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENTRY, new org.apache.thrift.meta_data.FieldMetaData("entry", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.renren.ugc.comment.xoa2.Entry.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetFriendsCommentListResponse.class, metaDataMap);
  }

  public GetFriendsCommentListResponse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetFriendsCommentListResponse(GetFriendsCommentListResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCommentList()) {
      List<com.renren.ugc.comment.xoa2.Comment> __this__commentList = new ArrayList<com.renren.ugc.comment.xoa2.Comment>();
      for (com.renren.ugc.comment.xoa2.Comment other_element : other.commentList) {
        __this__commentList.add(new com.renren.ugc.comment.xoa2.Comment(other_element));
      }
      this.commentList = __this__commentList;
    }
    if (other.isSetBaseRep()) {
      this.baseRep = new com.renren.xoa2.BaseResponse(other.baseRep);
    }
    this.more = other.more;
    if (other.isSetEntry()) {
      this.entry = new com.renren.ugc.comment.xoa2.Entry(other.entry);
    }
  }

  public GetFriendsCommentListResponse deepCopy() {
    return new GetFriendsCommentListResponse(this);
  }

  @Override
  public void clear() {
    this.commentList = null;
    this.baseRep = null;
    setMoreIsSet(false);
    this.more = false;
    this.entry = null;
  }

  public int getCommentListSize() {
    return (this.commentList == null) ? 0 : this.commentList.size();
  }

  public java.util.Iterator<com.renren.ugc.comment.xoa2.Comment> getCommentListIterator() {
    return (this.commentList == null) ? null : this.commentList.iterator();
  }

  public void addToCommentList(com.renren.ugc.comment.xoa2.Comment elem) {
    if (this.commentList == null) {
      this.commentList = new ArrayList<com.renren.ugc.comment.xoa2.Comment>();
    }
    this.commentList.add(elem);
  }

  /**
   * 获取的评论的列表
   */
  public List<com.renren.ugc.comment.xoa2.Comment> getCommentList() {
    return this.commentList;
  }

  /**
   * 获取的评论的列表
   */
  public GetFriendsCommentListResponse setCommentList(List<com.renren.ugc.comment.xoa2.Comment> commentList) {
    this.commentList = commentList;
    return this;
  }

  public void unsetCommentList() {
    this.commentList = null;
  }

  /** Returns true if field commentList is set (has been assigned a value) and false otherwise */
  public boolean isSetCommentList() {
    return this.commentList != null;
  }

  public void setCommentListIsSet(boolean value) {
    if (!value) {
      this.commentList = null;
    }
  }

  /**
   * 响应信息
   */
  public com.renren.xoa2.BaseResponse getBaseRep() {
    return this.baseRep;
  }

  /**
   * 响应信息
   */
  public GetFriendsCommentListResponse setBaseRep(com.renren.xoa2.BaseResponse baseRep) {
    this.baseRep = baseRep;
    return this;
  }

  public void unsetBaseRep() {
    this.baseRep = null;
  }

  /** Returns true if field baseRep is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseRep() {
    return this.baseRep != null;
  }

  public void setBaseRepIsSet(boolean value) {
    if (!value) {
      this.baseRep = null;
    }
  }

  /**
   * 是否有更多的评论
   */
  public boolean isMore() {
    return this.more;
  }

  /**
   * 是否有更多的评论
   */
  public GetFriendsCommentListResponse setMore(boolean more) {
    this.more = more;
    setMoreIsSet(true);
    return this;
  }

  public void unsetMore() {
    __isset_bit_vector.clear(__MORE_ISSET_ID);
  }

  /** Returns true if field more is set (has been assigned a value) and false otherwise */
  public boolean isSetMore() {
    return __isset_bit_vector.get(__MORE_ISSET_ID);
  }

  public void setMoreIsSet(boolean value) {
    __isset_bit_vector.set(__MORE_ISSET_ID, value);
  }

  /**
   * 被评论的“实体”
   */
  public com.renren.ugc.comment.xoa2.Entry getEntry() {
    return this.entry;
  }

  /**
   * 被评论的“实体”
   */
  public GetFriendsCommentListResponse setEntry(com.renren.ugc.comment.xoa2.Entry entry) {
    this.entry = entry;
    return this;
  }

  public void unsetEntry() {
    this.entry = null;
  }

  /** Returns true if field entry is set (has been assigned a value) and false otherwise */
  public boolean isSetEntry() {
    return this.entry != null;
  }

  public void setEntryIsSet(boolean value) {
    if (!value) {
      this.entry = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMENT_LIST:
      if (value == null) {
        unsetCommentList();
      } else {
        setCommentList((List<com.renren.ugc.comment.xoa2.Comment>)value);
      }
      break;

    case BASE_REP:
      if (value == null) {
        unsetBaseRep();
      } else {
        setBaseRep((com.renren.xoa2.BaseResponse)value);
      }
      break;

    case MORE:
      if (value == null) {
        unsetMore();
      } else {
        setMore((Boolean)value);
      }
      break;

    case ENTRY:
      if (value == null) {
        unsetEntry();
      } else {
        setEntry((com.renren.ugc.comment.xoa2.Entry)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMENT_LIST:
      return getCommentList();

    case BASE_REP:
      return getBaseRep();

    case MORE:
      return Boolean.valueOf(isMore());

    case ENTRY:
      return getEntry();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMENT_LIST:
      return isSetCommentList();
    case BASE_REP:
      return isSetBaseRep();
    case MORE:
      return isSetMore();
    case ENTRY:
      return isSetEntry();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetFriendsCommentListResponse)
      return this.equals((GetFriendsCommentListResponse)that);
    return false;
  }

  public boolean equals(GetFriendsCommentListResponse that) {
    if (that == null)
      return false;

    boolean this_present_commentList = true && this.isSetCommentList();
    boolean that_present_commentList = true && that.isSetCommentList();
    if (this_present_commentList || that_present_commentList) {
      if (!(this_present_commentList && that_present_commentList))
        return false;
      if (!this.commentList.equals(that.commentList))
        return false;
    }

    boolean this_present_baseRep = true && this.isSetBaseRep();
    boolean that_present_baseRep = true && that.isSetBaseRep();
    if (this_present_baseRep || that_present_baseRep) {
      if (!(this_present_baseRep && that_present_baseRep))
        return false;
      if (!this.baseRep.equals(that.baseRep))
        return false;
    }

    boolean this_present_more = true && this.isSetMore();
    boolean that_present_more = true && that.isSetMore();
    if (this_present_more || that_present_more) {
      if (!(this_present_more && that_present_more))
        return false;
      if (this.more != that.more)
        return false;
    }

    boolean this_present_entry = true && this.isSetEntry();
    boolean that_present_entry = true && that.isSetEntry();
    if (this_present_entry || that_present_entry) {
      if (!(this_present_entry && that_present_entry))
        return false;
      if (!this.entry.equals(that.entry))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_commentList = true && (isSetCommentList());
    builder.append(present_commentList);
    if (present_commentList)
      builder.append(commentList);

    boolean present_baseRep = true && (isSetBaseRep());
    builder.append(present_baseRep);
    if (present_baseRep)
      builder.append(baseRep);

    boolean present_more = true && (isSetMore());
    builder.append(present_more);
    if (present_more)
      builder.append(more);

    boolean present_entry = true && (isSetEntry());
    builder.append(present_entry);
    if (present_entry)
      builder.append(entry);

    return builder.toHashCode();
  }

  public int compareTo(GetFriendsCommentListResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    GetFriendsCommentListResponse typedOther = (GetFriendsCommentListResponse)other;

    lastComparison = Boolean.valueOf(isSetCommentList()).compareTo(typedOther.isSetCommentList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommentList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentList, typedOther.commentList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseRep()).compareTo(typedOther.isSetBaseRep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseRep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseRep, typedOther.baseRep);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMore()).compareTo(typedOther.isSetMore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.more, typedOther.more);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntry()).compareTo(typedOther.isSetEntry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entry, typedOther.entry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetFriendsCommentListResponse(");
    boolean first = true;

    if (isSetCommentList()) {
      sb.append("commentList:");
      if (this.commentList == null) {
        sb.append("null");
      } else {
        sb.append(this.commentList);
      }
      first = false;
    }
    if (isSetBaseRep()) {
      if (!first) sb.append(", ");
      sb.append("baseRep:");
      if (this.baseRep == null) {
        sb.append("null");
      } else {
        sb.append(this.baseRep);
      }
      first = false;
    }
    if (isSetMore()) {
      if (!first) sb.append(", ");
      sb.append("more:");
      sb.append(this.more);
      first = false;
    }
    if (isSetEntry()) {
      if (!first) sb.append(", ");
      sb.append("entry:");
      if (this.entry == null) {
        sb.append("null");
      } else {
        sb.append(this.entry);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetFriendsCommentListResponseStandardSchemeFactory implements SchemeFactory {
    public GetFriendsCommentListResponseStandardScheme getScheme() {
      return new GetFriendsCommentListResponseStandardScheme();
    }
  }

  private static class GetFriendsCommentListResponseStandardScheme extends StandardScheme<GetFriendsCommentListResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetFriendsCommentListResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                struct.commentList = new ArrayList<com.renren.ugc.comment.xoa2.Comment>(_list226.size);
                for (int _i227 = 0; _i227 < _list226.size; ++_i227)
                {
                  com.renren.ugc.comment.xoa2.Comment _elem228; // required
                  _elem228 = new com.renren.ugc.comment.xoa2.Comment();
                  _elem228.read(iprot);
                  struct.commentList.add(_elem228);
                }
                iprot.readListEnd();
              }
              struct.setCommentListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE_REP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.baseRep = new com.renren.xoa2.BaseResponse();
              struct.baseRep.read(iprot);
              struct.setBaseRepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MORE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.more = iprot.readBool();
              struct.setMoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entry = new com.renren.ugc.comment.xoa2.Entry();
              struct.entry.read(iprot);
              struct.setEntryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetFriendsCommentListResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commentList != null) {
        if (struct.isSetCommentList()) {
          oprot.writeFieldBegin(COMMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commentList.size()));
            for (com.renren.ugc.comment.xoa2.Comment _iter229 : struct.commentList)
            {
              _iter229.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.baseRep != null) {
        if (struct.isSetBaseRep()) {
          oprot.writeFieldBegin(BASE_REP_FIELD_DESC);
          struct.baseRep.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMore()) {
        oprot.writeFieldBegin(MORE_FIELD_DESC);
        oprot.writeBool(struct.more);
        oprot.writeFieldEnd();
      }
      if (struct.entry != null) {
        if (struct.isSetEntry()) {
          oprot.writeFieldBegin(ENTRY_FIELD_DESC);
          struct.entry.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetFriendsCommentListResponseTupleSchemeFactory implements SchemeFactory {
    public GetFriendsCommentListResponseTupleScheme getScheme() {
      return new GetFriendsCommentListResponseTupleScheme();
    }
  }

  private static class GetFriendsCommentListResponseTupleScheme extends TupleScheme<GetFriendsCommentListResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetFriendsCommentListResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommentList()) {
        optionals.set(0);
      }
      if (struct.isSetBaseRep()) {
        optionals.set(1);
      }
      if (struct.isSetMore()) {
        optionals.set(2);
      }
      if (struct.isSetEntry()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCommentList()) {
        {
          oprot.writeI32(struct.commentList.size());
          for (com.renren.ugc.comment.xoa2.Comment _iter230 : struct.commentList)
          {
            _iter230.write(oprot);
          }
        }
      }
      if (struct.isSetBaseRep()) {
        struct.baseRep.write(oprot);
      }
      if (struct.isSetMore()) {
        oprot.writeBool(struct.more);
      }
      if (struct.isSetEntry()) {
        struct.entry.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetFriendsCommentListResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list231 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.commentList = new ArrayList<com.renren.ugc.comment.xoa2.Comment>(_list231.size);
          for (int _i232 = 0; _i232 < _list231.size; ++_i232)
          {
            com.renren.ugc.comment.xoa2.Comment _elem233; // required
            _elem233 = new com.renren.ugc.comment.xoa2.Comment();
            _elem233.read(iprot);
            struct.commentList.add(_elem233);
          }
        }
        struct.setCommentListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.baseRep = new com.renren.xoa2.BaseResponse();
        struct.baseRep.read(iprot);
        struct.setBaseRepIsSet(true);
      }
      if (incoming.get(2)) {
        struct.more = iprot.readBool();
        struct.setMoreIsSet(true);
      }
      if (incoming.get(3)) {
        struct.entry = new com.renren.ugc.comment.xoa2.Entry();
        struct.entry.read(iprot);
        struct.setEntryIsSet(true);
      }
    }
  }

}

