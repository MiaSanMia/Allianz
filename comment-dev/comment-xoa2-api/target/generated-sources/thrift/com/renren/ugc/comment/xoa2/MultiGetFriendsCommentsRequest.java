/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.ugc.comment.xoa2;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MultiGetFriendsCommentsRequest implements org.apache.thrift.TBase<MultiGetFriendsCommentsRequest, MultiGetFriendsCommentsRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MultiGetFriendsCommentsRequest");

  private static final org.apache.thrift.protocol.TField ENTRYS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("entrysInfo", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ACTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actorId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MultiGetFriendsCommentsRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MultiGetFriendsCommentsRequestTupleSchemeFactory());
  }

  /**
   * 要获取评论的实体列表
   */
  public List<com.renren.ugc.comment.xoa2.CommonEntryInfo> entrysInfo; // required
  /**
   * 当前用户id
   */
  public int actorId; // required
  /**
   * 额外参数
   */
  public Map<String,String> params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 要获取评论的实体列表
     */
    ENTRYS_INFO((short)1, "entrysInfo"),
    /**
     * 当前用户id
     */
    ACTOR_ID((short)2, "actorId"),
    /**
     * 额外参数
     */
    PARAMS((short)3, "params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENTRYS_INFO
          return ENTRYS_INFO;
        case 2: // ACTOR_ID
          return ACTOR_ID;
        case 3: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTORID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENTRYS_INFO, new org.apache.thrift.meta_data.FieldMetaData("entrysInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.renren.ugc.comment.xoa2.CommonEntryInfo.class))));
    tmpMap.put(_Fields.ACTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("actorId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiGetFriendsCommentsRequest.class, metaDataMap);
  }

  public MultiGetFriendsCommentsRequest() {
  }

  public MultiGetFriendsCommentsRequest(
    List<com.renren.ugc.comment.xoa2.CommonEntryInfo> entrysInfo,
    int actorId)
  {
    this();
    this.entrysInfo = entrysInfo;
    this.actorId = actorId;
    setActorIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MultiGetFriendsCommentsRequest(MultiGetFriendsCommentsRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetEntrysInfo()) {
      List<com.renren.ugc.comment.xoa2.CommonEntryInfo> __this__entrysInfo = new ArrayList<com.renren.ugc.comment.xoa2.CommonEntryInfo>();
      for (com.renren.ugc.comment.xoa2.CommonEntryInfo other_element : other.entrysInfo) {
        __this__entrysInfo.add(new com.renren.ugc.comment.xoa2.CommonEntryInfo(other_element));
      }
      this.entrysInfo = __this__entrysInfo;
    }
    this.actorId = other.actorId;
    if (other.isSetParams()) {
      Map<String,String> __this__params = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.params.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__params_copy_key = other_element_key;

        String __this__params_copy_value = other_element_value;

        __this__params.put(__this__params_copy_key, __this__params_copy_value);
      }
      this.params = __this__params;
    }
  }

  public MultiGetFriendsCommentsRequest deepCopy() {
    return new MultiGetFriendsCommentsRequest(this);
  }

  @Override
  public void clear() {
    this.entrysInfo = null;
    setActorIdIsSet(false);
    this.actorId = 0;
    this.params = null;
  }

  public int getEntrysInfoSize() {
    return (this.entrysInfo == null) ? 0 : this.entrysInfo.size();
  }

  public java.util.Iterator<com.renren.ugc.comment.xoa2.CommonEntryInfo> getEntrysInfoIterator() {
    return (this.entrysInfo == null) ? null : this.entrysInfo.iterator();
  }

  public void addToEntrysInfo(com.renren.ugc.comment.xoa2.CommonEntryInfo elem) {
    if (this.entrysInfo == null) {
      this.entrysInfo = new ArrayList<com.renren.ugc.comment.xoa2.CommonEntryInfo>();
    }
    this.entrysInfo.add(elem);
  }

  /**
   * 要获取评论的实体列表
   */
  public List<com.renren.ugc.comment.xoa2.CommonEntryInfo> getEntrysInfo() {
    return this.entrysInfo;
  }

  /**
   * 要获取评论的实体列表
   */
  public MultiGetFriendsCommentsRequest setEntrysInfo(List<com.renren.ugc.comment.xoa2.CommonEntryInfo> entrysInfo) {
    this.entrysInfo = entrysInfo;
    return this;
  }

  public void unsetEntrysInfo() {
    this.entrysInfo = null;
  }

  /** Returns true if field entrysInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetEntrysInfo() {
    return this.entrysInfo != null;
  }

  public void setEntrysInfoIsSet(boolean value) {
    if (!value) {
      this.entrysInfo = null;
    }
  }

  /**
   * 当前用户id
   */
  public int getActorId() {
    return this.actorId;
  }

  /**
   * 当前用户id
   */
  public MultiGetFriendsCommentsRequest setActorId(int actorId) {
    this.actorId = actorId;
    setActorIdIsSet(true);
    return this;
  }

  public void unsetActorId() {
    __isset_bit_vector.clear(__ACTORID_ISSET_ID);
  }

  /** Returns true if field actorId is set (has been assigned a value) and false otherwise */
  public boolean isSetActorId() {
    return __isset_bit_vector.get(__ACTORID_ISSET_ID);
  }

  public void setActorIdIsSet(boolean value) {
    __isset_bit_vector.set(__ACTORID_ISSET_ID, value);
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(String key, String val) {
    if (this.params == null) {
      this.params = new HashMap<String,String>();
    }
    this.params.put(key, val);
  }

  /**
   * 额外参数
   */
  public Map<String,String> getParams() {
    return this.params;
  }

  /**
   * 额外参数
   */
  public MultiGetFriendsCommentsRequest setParams(Map<String,String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENTRYS_INFO:
      if (value == null) {
        unsetEntrysInfo();
      } else {
        setEntrysInfo((List<com.renren.ugc.comment.xoa2.CommonEntryInfo>)value);
      }
      break;

    case ACTOR_ID:
      if (value == null) {
        unsetActorId();
      } else {
        setActorId((Integer)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENTRYS_INFO:
      return getEntrysInfo();

    case ACTOR_ID:
      return Integer.valueOf(getActorId());

    case PARAMS:
      return getParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENTRYS_INFO:
      return isSetEntrysInfo();
    case ACTOR_ID:
      return isSetActorId();
    case PARAMS:
      return isSetParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MultiGetFriendsCommentsRequest)
      return this.equals((MultiGetFriendsCommentsRequest)that);
    return false;
  }

  public boolean equals(MultiGetFriendsCommentsRequest that) {
    if (that == null)
      return false;

    boolean this_present_entrysInfo = true && this.isSetEntrysInfo();
    boolean that_present_entrysInfo = true && that.isSetEntrysInfo();
    if (this_present_entrysInfo || that_present_entrysInfo) {
      if (!(this_present_entrysInfo && that_present_entrysInfo))
        return false;
      if (!this.entrysInfo.equals(that.entrysInfo))
        return false;
    }

    boolean this_present_actorId = true;
    boolean that_present_actorId = true;
    if (this_present_actorId || that_present_actorId) {
      if (!(this_present_actorId && that_present_actorId))
        return false;
      if (this.actorId != that.actorId)
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_entrysInfo = true && (isSetEntrysInfo());
    builder.append(present_entrysInfo);
    if (present_entrysInfo)
      builder.append(entrysInfo);

    boolean present_actorId = true;
    builder.append(present_actorId);
    if (present_actorId)
      builder.append(actorId);

    boolean present_params = true && (isSetParams());
    builder.append(present_params);
    if (present_params)
      builder.append(params);

    return builder.toHashCode();
  }

  public int compareTo(MultiGetFriendsCommentsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MultiGetFriendsCommentsRequest typedOther = (MultiGetFriendsCommentsRequest)other;

    lastComparison = Boolean.valueOf(isSetEntrysInfo()).compareTo(typedOther.isSetEntrysInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntrysInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entrysInfo, typedOther.entrysInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActorId()).compareTo(typedOther.isSetActorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actorId, typedOther.actorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MultiGetFriendsCommentsRequest(");
    boolean first = true;

    sb.append("entrysInfo:");
    if (this.entrysInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.entrysInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actorId:");
    sb.append(this.actorId);
    first = false;
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (entrysInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'entrysInfo' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'actorId' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MultiGetFriendsCommentsRequestStandardSchemeFactory implements SchemeFactory {
    public MultiGetFriendsCommentsRequestStandardScheme getScheme() {
      return new MultiGetFriendsCommentsRequestStandardScheme();
    }
  }

  private static class MultiGetFriendsCommentsRequestStandardScheme extends StandardScheme<MultiGetFriendsCommentsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MultiGetFriendsCommentsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENTRYS_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list414 = iprot.readListBegin();
                struct.entrysInfo = new ArrayList<com.renren.ugc.comment.xoa2.CommonEntryInfo>(_list414.size);
                for (int _i415 = 0; _i415 < _list414.size; ++_i415)
                {
                  com.renren.ugc.comment.xoa2.CommonEntryInfo _elem416; // required
                  _elem416 = new com.renren.ugc.comment.xoa2.CommonEntryInfo();
                  _elem416.read(iprot);
                  struct.entrysInfo.add(_elem416);
                }
                iprot.readListEnd();
              }
              struct.setEntrysInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actorId = iprot.readI32();
              struct.setActorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map417 = iprot.readMapBegin();
                struct.params = new HashMap<String,String>(2*_map417.size);
                for (int _i418 = 0; _i418 < _map417.size; ++_i418)
                {
                  String _key419; // required
                  String _val420; // required
                  _key419 = iprot.readString();
                  _val420 = iprot.readString();
                  struct.params.put(_key419, _val420);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetActorId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'actorId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MultiGetFriendsCommentsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.entrysInfo != null) {
        oprot.writeFieldBegin(ENTRYS_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entrysInfo.size()));
          for (com.renren.ugc.comment.xoa2.CommonEntryInfo _iter421 : struct.entrysInfo)
          {
            _iter421.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTOR_ID_FIELD_DESC);
      oprot.writeI32(struct.actorId);
      oprot.writeFieldEnd();
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter422 : struct.params.entrySet())
            {
              oprot.writeString(_iter422.getKey());
              oprot.writeString(_iter422.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MultiGetFriendsCommentsRequestTupleSchemeFactory implements SchemeFactory {
    public MultiGetFriendsCommentsRequestTupleScheme getScheme() {
      return new MultiGetFriendsCommentsRequestTupleScheme();
    }
  }

  private static class MultiGetFriendsCommentsRequestTupleScheme extends TupleScheme<MultiGetFriendsCommentsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MultiGetFriendsCommentsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.entrysInfo.size());
        for (com.renren.ugc.comment.xoa2.CommonEntryInfo _iter423 : struct.entrysInfo)
        {
          _iter423.write(oprot);
        }
      }
      oprot.writeI32(struct.actorId);
      BitSet optionals = new BitSet();
      if (struct.isSetParams()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (Map.Entry<String, String> _iter424 : struct.params.entrySet())
          {
            oprot.writeString(_iter424.getKey());
            oprot.writeString(_iter424.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MultiGetFriendsCommentsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list425 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.entrysInfo = new ArrayList<com.renren.ugc.comment.xoa2.CommonEntryInfo>(_list425.size);
        for (int _i426 = 0; _i426 < _list425.size; ++_i426)
        {
          com.renren.ugc.comment.xoa2.CommonEntryInfo _elem427; // required
          _elem427 = new com.renren.ugc.comment.xoa2.CommonEntryInfo();
          _elem427.read(iprot);
          struct.entrysInfo.add(_elem427);
        }
      }
      struct.setEntrysInfoIsSet(true);
      struct.actorId = iprot.readI32();
      struct.setActorIdIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map428 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new HashMap<String,String>(2*_map428.size);
          for (int _i429 = 0; _i429 < _map428.size; ++_i429)
          {
            String _key430; // required
            String _val431; // required
            _key430 = iprot.readString();
            _val431 = iprot.readString();
            struct.params.put(_key430, _val431);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

}

