/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.ugc.comment.xoa2;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MultiParamForCreate implements org.apache.thrift.TBase<MultiParamForCreate, MultiParamForCreate._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MultiParamForCreate");

  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WHISPER_FIELD_DESC = new org.apache.thrift.protocol.TField("whisper", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField REPLY_TO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replyToId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TO_COMMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toCommentId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ACTOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actorId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MultiParamForCreateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MultiParamForCreateTupleSchemeFactory());
  }

  /**
   * 评论内容
   */
  public String content; // required
  /**
   * 是否是悄悄话
   */
  public boolean whisper; // optional
  /**
   * 被回复的用户Id
   */
  public int replyToId; // optional
  /**
   * 被回复的评论（楼层）的id
   */
  public long toCommentId; // optional
  /**
   * 添加评论用户Id
   */
  public int actorId; // required
  /**
   * 额外的参数，用于传入业务相关的参数
   */
  public Map<String,String> params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 评论内容
     */
    CONTENT((short)1, "content"),
    /**
     * 是否是悄悄话
     */
    WHISPER((short)2, "whisper"),
    /**
     * 被回复的用户Id
     */
    REPLY_TO_ID((short)4, "replyToId"),
    /**
     * 被回复的评论（楼层）的id
     */
    TO_COMMENT_ID((short)5, "toCommentId"),
    /**
     * 添加评论用户Id
     */
    ACTOR_ID((short)6, "actorId"),
    /**
     * 额外的参数，用于传入业务相关的参数
     */
    PARAMS((short)7, "params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTENT
          return CONTENT;
        case 2: // WHISPER
          return WHISPER;
        case 4: // REPLY_TO_ID
          return REPLY_TO_ID;
        case 5: // TO_COMMENT_ID
          return TO_COMMENT_ID;
        case 6: // ACTOR_ID
          return ACTOR_ID;
        case 7: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WHISPER_ISSET_ID = 0;
  private static final int __REPLYTOID_ISSET_ID = 1;
  private static final int __TOCOMMENTID_ISSET_ID = 2;
  private static final int __ACTORID_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);
  private _Fields optionals[] = {_Fields.WHISPER,_Fields.REPLY_TO_ID,_Fields.TO_COMMENT_ID,_Fields.PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WHISPER, new org.apache.thrift.meta_data.FieldMetaData("whisper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPLY_TO_ID, new org.apache.thrift.meta_data.FieldMetaData("replyToId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TO_COMMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("toCommentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTOR_ID, new org.apache.thrift.meta_data.FieldMetaData("actorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiParamForCreate.class, metaDataMap);
  }

  public MultiParamForCreate() {
  }

  public MultiParamForCreate(
    String content,
    int actorId)
  {
    this();
    this.content = content;
    this.actorId = actorId;
    setActorIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MultiParamForCreate(MultiParamForCreate other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.whisper = other.whisper;
    this.replyToId = other.replyToId;
    this.toCommentId = other.toCommentId;
    this.actorId = other.actorId;
    if (other.isSetParams()) {
      Map<String,String> __this__params = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.params.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__params_copy_key = other_element_key;

        String __this__params_copy_value = other_element_value;

        __this__params.put(__this__params_copy_key, __this__params_copy_value);
      }
      this.params = __this__params;
    }
  }

  public MultiParamForCreate deepCopy() {
    return new MultiParamForCreate(this);
  }

  @Override
  public void clear() {
    this.content = null;
    setWhisperIsSet(false);
    this.whisper = false;
    setReplyToIdIsSet(false);
    this.replyToId = 0;
    setToCommentIdIsSet(false);
    this.toCommentId = 0;
    setActorIdIsSet(false);
    this.actorId = 0;
    this.params = null;
  }

  /**
   * 评论内容
   */
  public String getContent() {
    return this.content;
  }

  /**
   * 评论内容
   */
  public MultiParamForCreate setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  /**
   * 是否是悄悄话
   */
  public boolean isWhisper() {
    return this.whisper;
  }

  /**
   * 是否是悄悄话
   */
  public MultiParamForCreate setWhisper(boolean whisper) {
    this.whisper = whisper;
    setWhisperIsSet(true);
    return this;
  }

  public void unsetWhisper() {
    __isset_bit_vector.clear(__WHISPER_ISSET_ID);
  }

  /** Returns true if field whisper is set (has been assigned a value) and false otherwise */
  public boolean isSetWhisper() {
    return __isset_bit_vector.get(__WHISPER_ISSET_ID);
  }

  public void setWhisperIsSet(boolean value) {
    __isset_bit_vector.set(__WHISPER_ISSET_ID, value);
  }

  /**
   * 被回复的用户Id
   */
  public int getReplyToId() {
    return this.replyToId;
  }

  /**
   * 被回复的用户Id
   */
  public MultiParamForCreate setReplyToId(int replyToId) {
    this.replyToId = replyToId;
    setReplyToIdIsSet(true);
    return this;
  }

  public void unsetReplyToId() {
    __isset_bit_vector.clear(__REPLYTOID_ISSET_ID);
  }

  /** Returns true if field replyToId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyToId() {
    return __isset_bit_vector.get(__REPLYTOID_ISSET_ID);
  }

  public void setReplyToIdIsSet(boolean value) {
    __isset_bit_vector.set(__REPLYTOID_ISSET_ID, value);
  }

  /**
   * 被回复的评论（楼层）的id
   */
  public long getToCommentId() {
    return this.toCommentId;
  }

  /**
   * 被回复的评论（楼层）的id
   */
  public MultiParamForCreate setToCommentId(long toCommentId) {
    this.toCommentId = toCommentId;
    setToCommentIdIsSet(true);
    return this;
  }

  public void unsetToCommentId() {
    __isset_bit_vector.clear(__TOCOMMENTID_ISSET_ID);
  }

  /** Returns true if field toCommentId is set (has been assigned a value) and false otherwise */
  public boolean isSetToCommentId() {
    return __isset_bit_vector.get(__TOCOMMENTID_ISSET_ID);
  }

  public void setToCommentIdIsSet(boolean value) {
    __isset_bit_vector.set(__TOCOMMENTID_ISSET_ID, value);
  }

  /**
   * 添加评论用户Id
   */
  public int getActorId() {
    return this.actorId;
  }

  /**
   * 添加评论用户Id
   */
  public MultiParamForCreate setActorId(int actorId) {
    this.actorId = actorId;
    setActorIdIsSet(true);
    return this;
  }

  public void unsetActorId() {
    __isset_bit_vector.clear(__ACTORID_ISSET_ID);
  }

  /** Returns true if field actorId is set (has been assigned a value) and false otherwise */
  public boolean isSetActorId() {
    return __isset_bit_vector.get(__ACTORID_ISSET_ID);
  }

  public void setActorIdIsSet(boolean value) {
    __isset_bit_vector.set(__ACTORID_ISSET_ID, value);
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(String key, String val) {
    if (this.params == null) {
      this.params = new HashMap<String,String>();
    }
    this.params.put(key, val);
  }

  /**
   * 额外的参数，用于传入业务相关的参数
   */
  public Map<String,String> getParams() {
    return this.params;
  }

  /**
   * 额外的参数，用于传入业务相关的参数
   */
  public MultiParamForCreate setParams(Map<String,String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case WHISPER:
      if (value == null) {
        unsetWhisper();
      } else {
        setWhisper((Boolean)value);
      }
      break;

    case REPLY_TO_ID:
      if (value == null) {
        unsetReplyToId();
      } else {
        setReplyToId((Integer)value);
      }
      break;

    case TO_COMMENT_ID:
      if (value == null) {
        unsetToCommentId();
      } else {
        setToCommentId((Long)value);
      }
      break;

    case ACTOR_ID:
      if (value == null) {
        unsetActorId();
      } else {
        setActorId((Integer)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTENT:
      return getContent();

    case WHISPER:
      return Boolean.valueOf(isWhisper());

    case REPLY_TO_ID:
      return Integer.valueOf(getReplyToId());

    case TO_COMMENT_ID:
      return Long.valueOf(getToCommentId());

    case ACTOR_ID:
      return Integer.valueOf(getActorId());

    case PARAMS:
      return getParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTENT:
      return isSetContent();
    case WHISPER:
      return isSetWhisper();
    case REPLY_TO_ID:
      return isSetReplyToId();
    case TO_COMMENT_ID:
      return isSetToCommentId();
    case ACTOR_ID:
      return isSetActorId();
    case PARAMS:
      return isSetParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MultiParamForCreate)
      return this.equals((MultiParamForCreate)that);
    return false;
  }

  public boolean equals(MultiParamForCreate that) {
    if (that == null)
      return false;

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_whisper = true && this.isSetWhisper();
    boolean that_present_whisper = true && that.isSetWhisper();
    if (this_present_whisper || that_present_whisper) {
      if (!(this_present_whisper && that_present_whisper))
        return false;
      if (this.whisper != that.whisper)
        return false;
    }

    boolean this_present_replyToId = true && this.isSetReplyToId();
    boolean that_present_replyToId = true && that.isSetReplyToId();
    if (this_present_replyToId || that_present_replyToId) {
      if (!(this_present_replyToId && that_present_replyToId))
        return false;
      if (this.replyToId != that.replyToId)
        return false;
    }

    boolean this_present_toCommentId = true && this.isSetToCommentId();
    boolean that_present_toCommentId = true && that.isSetToCommentId();
    if (this_present_toCommentId || that_present_toCommentId) {
      if (!(this_present_toCommentId && that_present_toCommentId))
        return false;
      if (this.toCommentId != that.toCommentId)
        return false;
    }

    boolean this_present_actorId = true;
    boolean that_present_actorId = true;
    if (this_present_actorId || that_present_actorId) {
      if (!(this_present_actorId && that_present_actorId))
        return false;
      if (this.actorId != that.actorId)
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_content = true && (isSetContent());
    builder.append(present_content);
    if (present_content)
      builder.append(content);

    boolean present_whisper = true && (isSetWhisper());
    builder.append(present_whisper);
    if (present_whisper)
      builder.append(whisper);

    boolean present_replyToId = true && (isSetReplyToId());
    builder.append(present_replyToId);
    if (present_replyToId)
      builder.append(replyToId);

    boolean present_toCommentId = true && (isSetToCommentId());
    builder.append(present_toCommentId);
    if (present_toCommentId)
      builder.append(toCommentId);

    boolean present_actorId = true;
    builder.append(present_actorId);
    if (present_actorId)
      builder.append(actorId);

    boolean present_params = true && (isSetParams());
    builder.append(present_params);
    if (present_params)
      builder.append(params);

    return builder.toHashCode();
  }

  public int compareTo(MultiParamForCreate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MultiParamForCreate typedOther = (MultiParamForCreate)other;

    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhisper()).compareTo(typedOther.isSetWhisper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhisper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whisper, typedOther.whisper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyToId()).compareTo(typedOther.isSetReplyToId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyToId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replyToId, typedOther.replyToId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToCommentId()).compareTo(typedOther.isSetToCommentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToCommentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toCommentId, typedOther.toCommentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActorId()).compareTo(typedOther.isSetActorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actorId, typedOther.actorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MultiParamForCreate(");
    boolean first = true;

    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (isSetWhisper()) {
      if (!first) sb.append(", ");
      sb.append("whisper:");
      sb.append(this.whisper);
      first = false;
    }
    if (isSetReplyToId()) {
      if (!first) sb.append(", ");
      sb.append("replyToId:");
      sb.append(this.replyToId);
      first = false;
    }
    if (isSetToCommentId()) {
      if (!first) sb.append(", ");
      sb.append("toCommentId:");
      sb.append(this.toCommentId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("actorId:");
    sb.append(this.actorId);
    first = false;
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MultiParamForCreateStandardSchemeFactory implements SchemeFactory {
    public MultiParamForCreateStandardScheme getScheme() {
      return new MultiParamForCreateStandardScheme();
    }
  }

  private static class MultiParamForCreateStandardScheme extends StandardScheme<MultiParamForCreate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MultiParamForCreate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WHISPER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.whisper = iprot.readBool();
              struct.setWhisperIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPLY_TO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replyToId = iprot.readI32();
              struct.setReplyToIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TO_COMMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toCommentId = iprot.readI64();
              struct.setToCommentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.actorId = iprot.readI32();
              struct.setActorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                struct.params = new HashMap<String,String>(2*_map20.size);
                for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                {
                  String _key22; // required
                  String _val23; // required
                  _key22 = iprot.readString();
                  _val23 = iprot.readString();
                  struct.params.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MultiParamForCreate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWhisper()) {
        oprot.writeFieldBegin(WHISPER_FIELD_DESC);
        oprot.writeBool(struct.whisper);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReplyToId()) {
        oprot.writeFieldBegin(REPLY_TO_ID_FIELD_DESC);
        oprot.writeI32(struct.replyToId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToCommentId()) {
        oprot.writeFieldBegin(TO_COMMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.toCommentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTOR_ID_FIELD_DESC);
      oprot.writeI32(struct.actorId);
      oprot.writeFieldEnd();
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (Map.Entry<String, String> _iter24 : struct.params.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MultiParamForCreateTupleSchemeFactory implements SchemeFactory {
    public MultiParamForCreateTupleScheme getScheme() {
      return new MultiParamForCreateTupleScheme();
    }
  }

  private static class MultiParamForCreateTupleScheme extends TupleScheme<MultiParamForCreate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MultiParamForCreate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContent()) {
        optionals.set(0);
      }
      if (struct.isSetWhisper()) {
        optionals.set(1);
      }
      if (struct.isSetReplyToId()) {
        optionals.set(2);
      }
      if (struct.isSetToCommentId()) {
        optionals.set(3);
      }
      if (struct.isSetActorId()) {
        optionals.set(4);
      }
      if (struct.isSetParams()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetWhisper()) {
        oprot.writeBool(struct.whisper);
      }
      if (struct.isSetReplyToId()) {
        oprot.writeI32(struct.replyToId);
      }
      if (struct.isSetToCommentId()) {
        oprot.writeI64(struct.toCommentId);
      }
      if (struct.isSetActorId()) {
        oprot.writeI32(struct.actorId);
      }
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (Map.Entry<String, String> _iter25 : struct.params.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            oprot.writeString(_iter25.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MultiParamForCreate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.whisper = iprot.readBool();
        struct.setWhisperIsSet(true);
      }
      if (incoming.get(2)) {
        struct.replyToId = iprot.readI32();
        struct.setReplyToIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.toCommentId = iprot.readI64();
        struct.setToCommentIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.actorId = iprot.readI32();
        struct.setActorIdIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.params = new HashMap<String,String>(2*_map26.size);
          for (int _i27 = 0; _i27 < _map26.size; ++_i27)
          {
            String _key28; // required
            String _val29; // required
            _key28 = iprot.readString();
            _val29 = iprot.readString();
            struct.params.put(_key28, _val29);
          }
        }
        struct.setParamsIsSet(true);
      }
    }
  }

}

