/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.ugc.comment.xoa2;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 缩减版的评论
 */
public class SimpleComment implements org.apache.thrift.TBase<SimpleComment, SimpleComment._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleComment");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authorId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("authorName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("floor", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimpleCommentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimpleCommentTupleSchemeFactory());
  }

  /**
   * comment的Id
   */
  public long id; // required
  /**
   * 评论者id
   */
  public int authorId; // required
  /**
   * 评论者名称
   */
  public String authorName; // required
  /**
   * 评论内容
   */
  public String content; // required
  /**
   * 评论在一个entry下面的楼数
   */
  public int floor; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * comment的Id
     */
    ID((short)1, "id"),
    /**
     * 评论者id
     */
    AUTHOR_ID((short)2, "authorId"),
    /**
     * 评论者名称
     */
    AUTHOR_NAME((short)3, "authorName"),
    /**
     * 评论内容
     */
    CONTENT((short)4, "content"),
    /**
     * 评论在一个entry下面的楼数
     */
    FLOOR((short)5, "floor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // AUTHOR_ID
          return AUTHOR_ID;
        case 3: // AUTHOR_NAME
          return AUTHOR_NAME;
        case 4: // CONTENT
          return CONTENT;
        case 5: // FLOOR
          return FLOOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __AUTHORID_ISSET_ID = 1;
  private static final int __FLOOR_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.FLOOR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("authorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTHOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("authorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOOR, new org.apache.thrift.meta_data.FieldMetaData("floor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleComment.class, metaDataMap);
  }

  public SimpleComment() {
  }

  public SimpleComment(
    long id,
    int authorId,
    String authorName,
    String content)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.authorId = authorId;
    setAuthorIdIsSet(true);
    this.authorName = authorName;
    this.content = content;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleComment(SimpleComment other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    this.authorId = other.authorId;
    if (other.isSetAuthorName()) {
      this.authorName = other.authorName;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.floor = other.floor;
  }

  public SimpleComment deepCopy() {
    return new SimpleComment(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setAuthorIdIsSet(false);
    this.authorId = 0;
    this.authorName = null;
    this.content = null;
    setFloorIsSet(false);
    this.floor = 0;
  }

  /**
   * comment的Id
   */
  public long getId() {
    return this.id;
  }

  /**
   * comment的Id
   */
  public SimpleComment setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  /**
   * 评论者id
   */
  public int getAuthorId() {
    return this.authorId;
  }

  /**
   * 评论者id
   */
  public SimpleComment setAuthorId(int authorId) {
    this.authorId = authorId;
    setAuthorIdIsSet(true);
    return this;
  }

  public void unsetAuthorId() {
    __isset_bit_vector.clear(__AUTHORID_ISSET_ID);
  }

  /** Returns true if field authorId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorId() {
    return __isset_bit_vector.get(__AUTHORID_ISSET_ID);
  }

  public void setAuthorIdIsSet(boolean value) {
    __isset_bit_vector.set(__AUTHORID_ISSET_ID, value);
  }

  /**
   * 评论者名称
   */
  public String getAuthorName() {
    return this.authorName;
  }

  /**
   * 评论者名称
   */
  public SimpleComment setAuthorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

  public void unsetAuthorName() {
    this.authorName = null;
  }

  /** Returns true if field authorName is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorName() {
    return this.authorName != null;
  }

  public void setAuthorNameIsSet(boolean value) {
    if (!value) {
      this.authorName = null;
    }
  }

  /**
   * 评论内容
   */
  public String getContent() {
    return this.content;
  }

  /**
   * 评论内容
   */
  public SimpleComment setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  /**
   * 评论在一个entry下面的楼数
   */
  public int getFloor() {
    return this.floor;
  }

  /**
   * 评论在一个entry下面的楼数
   */
  public SimpleComment setFloor(int floor) {
    this.floor = floor;
    setFloorIsSet(true);
    return this;
  }

  public void unsetFloor() {
    __isset_bit_vector.clear(__FLOOR_ISSET_ID);
  }

  /** Returns true if field floor is set (has been assigned a value) and false otherwise */
  public boolean isSetFloor() {
    return __isset_bit_vector.get(__FLOOR_ISSET_ID);
  }

  public void setFloorIsSet(boolean value) {
    __isset_bit_vector.set(__FLOOR_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case AUTHOR_ID:
      if (value == null) {
        unsetAuthorId();
      } else {
        setAuthorId((Integer)value);
      }
      break;

    case AUTHOR_NAME:
      if (value == null) {
        unsetAuthorName();
      } else {
        setAuthorName((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case FLOOR:
      if (value == null) {
        unsetFloor();
      } else {
        setFloor((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case AUTHOR_ID:
      return Integer.valueOf(getAuthorId());

    case AUTHOR_NAME:
      return getAuthorName();

    case CONTENT:
      return getContent();

    case FLOOR:
      return Integer.valueOf(getFloor());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case AUTHOR_ID:
      return isSetAuthorId();
    case AUTHOR_NAME:
      return isSetAuthorName();
    case CONTENT:
      return isSetContent();
    case FLOOR:
      return isSetFloor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleComment)
      return this.equals((SimpleComment)that);
    return false;
  }

  public boolean equals(SimpleComment that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_authorId = true;
    boolean that_present_authorId = true;
    if (this_present_authorId || that_present_authorId) {
      if (!(this_present_authorId && that_present_authorId))
        return false;
      if (this.authorId != that.authorId)
        return false;
    }

    boolean this_present_authorName = true && this.isSetAuthorName();
    boolean that_present_authorName = true && that.isSetAuthorName();
    if (this_present_authorName || that_present_authorName) {
      if (!(this_present_authorName && that_present_authorName))
        return false;
      if (!this.authorName.equals(that.authorName))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_floor = true && this.isSetFloor();
    boolean that_present_floor = true && that.isSetFloor();
    if (this_present_floor || that_present_floor) {
      if (!(this_present_floor && that_present_floor))
        return false;
      if (this.floor != that.floor)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_authorId = true;
    builder.append(present_authorId);
    if (present_authorId)
      builder.append(authorId);

    boolean present_authorName = true && (isSetAuthorName());
    builder.append(present_authorName);
    if (present_authorName)
      builder.append(authorName);

    boolean present_content = true && (isSetContent());
    builder.append(present_content);
    if (present_content)
      builder.append(content);

    boolean present_floor = true && (isSetFloor());
    builder.append(present_floor);
    if (present_floor)
      builder.append(floor);

    return builder.toHashCode();
  }

  public int compareTo(SimpleComment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SimpleComment typedOther = (SimpleComment)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorId()).compareTo(typedOther.isSetAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorId, typedOther.authorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorName()).compareTo(typedOther.isSetAuthorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorName, typedOther.authorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloor()).compareTo(typedOther.isSetFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.floor, typedOther.floor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimpleComment(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorId:");
    sb.append(this.authorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorName:");
    if (this.authorName == null) {
      sb.append("null");
    } else {
      sb.append(this.authorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (isSetFloor()) {
      if (!first) sb.append(", ");
      sb.append("floor:");
      sb.append(this.floor);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimpleCommentStandardSchemeFactory implements SchemeFactory {
    public SimpleCommentStandardScheme getScheme() {
      return new SimpleCommentStandardScheme();
    }
  }

  private static class SimpleCommentStandardScheme extends StandardScheme<SimpleComment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleComment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authorId = iprot.readI32();
              struct.setAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorName = iprot.readString();
              struct.setAuthorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.floor = iprot.readI32();
              struct.setFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleComment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
      oprot.writeI32(struct.authorId);
      oprot.writeFieldEnd();
      if (struct.authorName != null) {
        oprot.writeFieldBegin(AUTHOR_NAME_FIELD_DESC);
        oprot.writeString(struct.authorName);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFloor()) {
        oprot.writeFieldBegin(FLOOR_FIELD_DESC);
        oprot.writeI32(struct.floor);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimpleCommentTupleSchemeFactory implements SchemeFactory {
    public SimpleCommentTupleScheme getScheme() {
      return new SimpleCommentTupleScheme();
    }
  }

  private static class SimpleCommentTupleScheme extends TupleScheme<SimpleComment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimpleComment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAuthorId()) {
        optionals.set(1);
      }
      if (struct.isSetAuthorName()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetFloor()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetAuthorId()) {
        oprot.writeI32(struct.authorId);
      }
      if (struct.isSetAuthorName()) {
        oprot.writeString(struct.authorName);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetFloor()) {
        oprot.writeI32(struct.floor);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimpleComment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.authorId = iprot.readI32();
        struct.setAuthorIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.authorName = iprot.readString();
        struct.setAuthorNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.floor = iprot.readI32();
        struct.setFloorIsSet(true);
      }
    }
  }

}

